/*
NOTE:
Relies on `--sticky-bars-height` being set,
this is currently being done in `BaseNewLayout`.
See comment in src/layouts/base-new/base-new-layout.module.css
for further details.
*/

.root {
  display: flex;

  /* For a coherent visual effect, the top padding value
  must be used for sticky positioning in addition to
  padding the content area. So, we create a CSS var
  to make it reusable and express this intent. */
  --main-area-padding-top: 32px;

  /* When the sidecar is hidden, then --main-area-padding-right must adjust.
  Note that the "left" value, --main-area-padding-left, is declared in 
  core-dev-dot-layout.module.css, as the left value  must be shared with the
  navigation-header component, in order to match alignment in design specs. */
  --main-area-padding-right: 24px;

  /*
  We want our footer to have a top border which spans
  across both the main content and sidecar.
  We also want our footer content to be aligned with our main content,
  taking on the same max width and left-right padding.

  To achieve this, we set the main content max width,
  main content padding, and sidecar width as CSS variables
  to be used in the main content, sidecar, and footer containers.

  The footer itself contains an absolutely positioned :before element
  which serves as the border, and which overflows the footer on both sides.
  
  The footer container ensures this border overflow does not cause scroll
  using overflow hidden. We place an empty sidecar placeholder pseudo-element
  within this container, next to the footer, to ensure spacing is consistent.

  This method requires two separate "rows" for the main content + sidecar area,
  and for the footer area. Having to share values between them is not ideal.
  But, it sidesteps issues in mixing overflow: hidden with position: sticky.
  Details: https://css-tricks.com/dealing-with-overflow-and-position-sticky/
  */
  --main-element-max-width: 896px;
  --sidecar-width: 220px;
}

/**
 * Sidebar + main containers
 */

.sidebarWrapper {
  background-color: white;
  box-shadow: 0 2px 3px rgba(101, 106, 118, 0.1),
    0 12px 28px rgba(101, 106, 118, 0.25);
  flex-shrink: 0;

  /* Sidebar should occupy the full available screen height.
  We have sticky nav bars, so the full height is equal to
  100vh minus the combined height of the sticky nav bars. */
  max-height: calc(100vh - var(--sticky-bars-height));
  position: sticky;
  top: var(--sticky-bars-height);
  width: var(--dev-dot-sidebar-width);

  /* z-index is necessary here to prevent any absolutely
  positioned elements in the main area, namely the footer's
  top-border, from overlapping the sidebar */
  z-index: 1;

  @media (--dev-dot-tablet-down) {
    left: -150vw;
    width: 100vw;
    padding-bottom: 70px;
    height: 100%;
    position: fixed;
    top: unset; /** We want to pull the top relative to the parent on mobile */
  }
}

.sidebarContentWrapper {
  height: 100%; /* for positioning the version switcher */
  overflow-y: auto; /* for positioning the version switcher */
  position: relative;
  padding: 24px;
}

.docsVersionSwitcherWrapper {
  bottom: 0;
  position: sticky;
  width: 100%;
  z-index: 2;
}

.contentWrapper {
  width: 100%;

  @media (--dev-dot-desktop) {
    max-width: calc(100vw - var(--dev-dot-sidebar-width));
  }
}

.main {
  /* Ensure all TableOfContents items have room to be jumped to */
  padding-bottom: 50vh;
}

.editOnGithubLink {
  margin-top: 64px;
}

.footerAreaWrapper {
  margin-top: 106px;
}

.mainAreaWrapper {
  padding-left: var(--main-area-padding-left);
  padding-right: var(--main-area-padding-right);
  padding-top: var(--main-area-padding-top);
}

.breadcrumbOptOutGroup {
  display: flex;
  justify-content: space-between;
  align-items: baseline;
}

.optInOutSlot {
  flex-shrink: 0;
}

/*
***
* classes for the version PageAlert
***
*/

.versionAlert {
  padding-left: var(--main-area-padding-left);
  padding-right: var(--main-area-padding-right);
}

.versionAlertLink {
  color: var(--token-color-foreground-primary) !important;
}

/*
***
* The following classes are grouped in a way that ensures the footer is always
* left-aligned and the same width as the main content area.
***
*/

.mainAreaWrapper,
.footerAreaWrapper {
  display: flex;
  justify-content: center;
}

.main,
.footer {
  width: 100%;

  @media (--dev-dot-sidecar-up) {
    max-width: var(--main-element-max-width);
    min-width: 0;
  }
}

.sidecarWrapper,
.emptyDuplicateSidecarWrapper {
  display: none;

  @media (--dev-dot-sidecar-up) {
    display: block;
    flex-shrink: 0;
    height: fit-content;
    margin-left: 48px;
    position: sticky;
    top: calc(var(--sticky-bars-height) + var(--main-area-padding-top));
    width: var(--sidecar-width);
  }
}
