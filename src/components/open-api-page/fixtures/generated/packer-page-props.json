{
	"info": {
		"title": "HashiCorp Cloud Platform Packer Artifact Registry",
		"description": "API for managing Packer images.",
		"version": "2021-04-30"
	},
	"navData": [
		{
			"title": "Packer Service",
			"indexData": true,
			"path": ""
		}
	],
	"isSingleService": true,
	"operationCategory": {
		"name": "Packer Service",
		"slug": "packer-service",
		"operations": [
			{
				"__type": "get",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/builds/{build_id}",
				"operationId": "GetBuild",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"build": {
									"description": "<p>The requested build.</p>",
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
										},
										"iteration_id": {
											"type": "string",
											"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
										},
										"component_type": {
											"type": "string",
											"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
										},
										"packer_run_uuid": {
											"type": "string",
											"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
										},
										"images": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"id": {
														"type": "string",
														"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
													},
													"image_id": {
														"type": "string",
														"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
													},
													"region": {
														"type": "string",
														"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
													},
													"created_at": {
														"type": "string",
														"format": "date-time",
														"title": "<p>Timestamp at which this image was created</p>"
													}
												},
												"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
											},
											"description": "<p>List of images associated with this build.</p>"
										},
										"cloud_provider": {
											"type": "string",
											"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
										},
										"status": {
											"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
											"type": "string",
											"enum": [
												"UNSET",
												"RUNNING",
												"DONE",
												"CANCELLED",
												"FAILED"
											],
											"default": "UNSET",
											"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the build was created.</p>"
										},
										"updated_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the build was most recently updated.</p>"
										},
										"labels": {
											"type": "object",
											"additionalProperties": {
												"type": "string"
											},
											"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
										}
									}
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "build_id",
						"description": "<p>Unique identifier of the build that should be retrieved; this ID was\ncreated and set by the HCP Packer registry when the build was created.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "delete",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/builds/{build_id}",
				"operationId": "DeleteBuild",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object"
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "build_id",
						"description": "<p>Unique identifier of the build that should be deleted; this ID was\ncreated and set by the HCP Packer registry when the build was created.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "patch",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/builds/{build_id}",
				"operationId": "UpdateBuild",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"build": {
									"description": "<p>Information about the build you updated.</p>",
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
										},
										"iteration_id": {
											"type": "string",
											"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
										},
										"component_type": {
											"type": "string",
											"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
										},
										"packer_run_uuid": {
											"type": "string",
											"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
										},
										"images": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"id": {
														"type": "string",
														"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
													},
													"image_id": {
														"type": "string",
														"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
													},
													"region": {
														"type": "string",
														"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
													},
													"created_at": {
														"type": "string",
														"format": "date-time",
														"title": "<p>Timestamp at which this image was created</p>"
													}
												},
												"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
											},
											"description": "<p>List of images associated with this build.</p>"
										},
										"cloud_provider": {
											"type": "string",
											"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
										},
										"status": {
											"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
											"type": "string",
											"enum": [
												"UNSET",
												"RUNNING",
												"DONE",
												"CANCELLED",
												"FAILED"
											],
											"default": "UNSET",
											"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the build was created.</p>"
										},
										"updated_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the build was most recently updated.</p>"
										},
										"labels": {
											"type": "object",
											"additionalProperties": {
												"type": "string"
											},
											"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
										}
									}
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "build_id",
						"description": "<p>Unique identifier of the build that should be updated; this ID was\ncreated and set by the HCP Packer registry when the build was created.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"type": "object",
							"properties": {
								"location": {
									"title": "<p>HCP-specific information like project and organization ID</p>",
									"type": "object",
									"properties": {
										"organization_id": {
											"type": "string",
											"description": "<p>organization_id is the id of the organization.</p>"
										},
										"project_id": {
											"type": "string",
											"description": "<p>project_id is the projects id.</p>"
										},
										"region": {
											"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
											"type": "object",
											"properties": {
												"provider": {
													"type": "string",
													"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
												},
												"region": {
													"type": "string",
													"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
												}
											}
										}
									},
									"description": "<p>Location represents a target for an operation in HCP.</p>"
								},
								"build_id": {
									"type": "string",
									"description": "<p>Unique identifier of the build that should be updated; this ID was\ncreated and set by the HCP Packer registry when the build was created.</p>"
								},
								"updates": {
									"description": "<p>Information about the build you are updating.</p>",
									"type": "object",
									"properties": {
										"status": {
											"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
											"type": "string",
											"enum": [
												"UNSET",
												"RUNNING",
												"DONE",
												"CANCELLED",
												"FAILED"
											],
											"default": "UNSET",
											"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
										},
										"cloud_provider": {
											"type": "string",
											"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
										},
										"packer_run_uuid": {
											"type": "string",
											"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
										},
										"images": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"image_id": {
														"type": "string",
														"description": "<p>ID or URL of the remote cloud image as given by a build.</p>"
													},
													"region": {
														"type": "string",
														"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
													}
												},
												"description": "<p>This message is used for build/create calls; it removes elements from the\nImage message that the user cannot set.</p>"
											},
											"description": "<p>A list of images to create and associate with this build.</p>"
										},
										"labels": {
											"type": "object",
											"additionalProperties": {
												"type": "string"
											},
											"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
										}
									}
								}
							}
						}
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "get",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images",
				"operationId": "ListBuckets",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"buckets": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string",
												"description": "<p>Unique identifier of the bucket; created and set by the HCP Packer\nregistry when the bucket is created.</p>"
											},
											"slug": {
												"type": "string",
												"description": "<p>Human-readable name for the bucket.</p>"
											},
											"location": {
												"title": "<p>HCP-specific information like project and organization ID</p>",
												"type": "object",
												"properties": {
													"organization_id": {
														"type": "string",
														"description": "<p>organization_id is the id of the organization.</p>"
													},
													"project_id": {
														"type": "string",
														"description": "<p>project_id is the projects id.</p>"
													},
													"region": {
														"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
														"type": "object",
														"properties": {
															"provider": {
																"type": "string",
																"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
															},
															"region": {
																"type": "string",
																"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
															}
														}
													}
												},
												"description": "<p>Location represents a target for an operation in HCP.</p>"
											},
											"latest_iteration": {
												"title": "<p>The bucket's most recent iteration -- this iteration may be complete or\nnot</p>",
												"type": "object",
												"properties": {
													"id": {
														"type": "string",
														"description": "<p>Unique identifier of the iteration; created and set by the HCP Packer\nregistry when the iteration is created.</p>"
													},
													"bucket_slug": {
														"type": "string",
														"description": "<p>Human-readable name for the bucket that this iteration is associated with.</p>"
													},
													"iteration_ancestor_id": {
														"type": "string",
														"description": "<p>The unique identifier of the iteration that was used as a source\nfor this iteration, if this iteration was built on a base layer.</p>"
													},
													"incremental_version": {
														"type": "integer",
														"format": "int32",
														"description": "<p>The human-readable version number assigned to this iteration. This\nfield will only be set if the iteration is \"complete\".</p>"
													},
													"complete": {
														"type": "boolean",
														"description": "<p>If true, all builds associated with this iteration have successfully\ncompleted and uploaded metadata to the registry. When \"complete\" is true,\nThis iteration is considered ready to use, and can have channels assigned\nto it.</p>"
													},
													"author_id": {
														"type": "string",
														"description": "<p>The name of the person who created this iteration.</p>"
													},
													"created_at": {
														"type": "string",
														"format": "date-time",
														"description": "<p>When the iteration was created.</p>"
													},
													"updated_at": {
														"type": "string",
														"format": "date-time",
														"description": "<p>When the iteration was last updated.</p>"
													},
													"fingerprint": {
														"type": "string",
														"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
													},
													"builds": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"id": {
																	"type": "string",
																	"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
																},
																"iteration_id": {
																	"type": "string",
																	"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
																},
																"component_type": {
																	"type": "string",
																	"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
																},
																"packer_run_uuid": {
																	"type": "string",
																	"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
																},
																"images": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"id": {
																				"type": "string",
																				"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
																			},
																			"image_id": {
																				"type": "string",
																				"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
																			},
																			"region": {
																				"type": "string",
																				"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
																			},
																			"created_at": {
																				"type": "string",
																				"format": "date-time",
																				"title": "<p>Timestamp at which this image was created</p>"
																			}
																		},
																		"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
																	},
																	"description": "<p>List of images associated with this build.</p>"
																},
																"cloud_provider": {
																	"type": "string",
																	"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
																},
																"status": {
																	"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
																	"type": "string",
																	"enum": [
																		"UNSET",
																		"RUNNING",
																		"DONE",
																		"CANCELLED",
																		"FAILED"
																	],
																	"default": "UNSET",
																	"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
																},
																"created_at": {
																	"type": "string",
																	"format": "date-time",
																	"description": "<p>When the build was created.</p>"
																},
																"updated_at": {
																	"type": "string",
																	"format": "date-time",
																	"description": "<p>When the build was most recently updated.</p>"
																},
																"labels": {
																	"type": "object",
																	"additionalProperties": {
																		"type": "string"
																	},
																	"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
																}
															}
														},
														"description": "<p>A list of all the builds associated with this iteration.</p>"
													}
												}
											},
											"latest_version": {
												"type": "integer",
												"format": "int32",
												"description": "<p>The human-readable version of the most recent completed iteration in\nthis bucket.</p>"
											},
											"created_at": {
												"type": "string",
												"format": "date-time",
												"description": "<p>When the bucket was created.</p>"
											},
											"updated_at": {
												"type": "string",
												"format": "date-time",
												"description": "<p>When the bucket was last updated.</p>"
											},
											"platforms": {
												"type": "array",
												"items": {
													"type": "string"
												},
												"description": "<p>A list of which cloud providers or other platforms the bucket contains\nbuilds for. For example, AWS, GCP, or Azure.</p>"
											},
											"description": {
												"type": "string",
												"description": "<p>A short description of what this bucket's images are for.</p>"
											},
											"labels": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "<p>A key:value map for custom, user-settable metadata about your bucket.</p>"
											},
											"iteration_count": {
												"type": "string",
												"format": "int64",
												"description": "<p>The total number of iterations in this bucket.</p>"
											}
										}
									},
									"description": "<p>List of buckets.</p>"
								},
								"pagination": {
									"description": "<p>Pagination tokens for a subsequent request.</p>",
									"type": "object",
									"properties": {
										"next_page_token": {
											"type": "string",
											"description": "<p>This token allows you to get the next page of results for list requests.\nIf the number of results is larger than <code>page_size</code>, use the\n<code>next_page_token</code> as a value for the query parameter <code>next_page_token</code> in\nthe next request. The value will become empty when there are no more pages.</p>"
										},
										"previous_page_token": {
											"type": "string",
											"description": "<p>This token allows you to get the previous page of results for list\nrequests. If the number of results is larger than <code>page_size</code>, use the\n<code>previous_page_token</code> as a value for the query parameter\n<code>previous_page_token</code> in the next request. The value will become empty when\nthere are no more pages.</p>"
										}
									}
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "pagination.page_size",
						"description": "<p>The max number of results per page that should be returned. If the number\nof available results is larger than <code>page_size</code>, a <code>next_page_token</code> is\nreturned which can be used to get the next page of results in subsequent\nrequests. A value of zero will cause <code>page_size</code> to be defaulted.</p>",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "pagination.next_page_token",
						"description": "<p>Specifies a page token to use to retrieve the next page. Set this to the\n<code>next_page_token</code> returned by previous list requests to get the next page of\nresults. If set, <code>previous_page_token</code> must not be set.</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "pagination.previous_page_token",
						"description": "<p>Specifies a page token to use to retrieve the previous page. Set this to\nthe <code>previous_page_token</code> returned by previous list requests to get the\nprevious page of results. If set, <code>next_page_token</code> must not be set.</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "sorting.order_by",
						"description": "<p>Specifies the list of per field ordering that should be used for sorting.\nThe order matters as rows are sorted in order by fields and when the field\nmatches, the next field is used to tie break the ordering.\nThe per field default ordering is ascending.  </p>\n<p>The fields should be immutabile, unique, and orderable. If the field is\nnot unique, more than one sort fields should be passed.</p>\n<p>Example: oder_by=name,age desc,created_at asc\nIn that case, 'name' will get the default 'ascending' order.</p>",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "put",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images",
				"operationId": "CreateBucket",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"bucket": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "<p>Unique identifier of the bucket; created and set by the HCP Packer\nregistry when the bucket is created.</p>"
										},
										"slug": {
											"type": "string",
											"description": "<p>Human-readable name for the bucket.</p>"
										},
										"location": {
											"title": "<p>HCP-specific information like project and organization ID</p>",
											"type": "object",
											"properties": {
												"organization_id": {
													"type": "string",
													"description": "<p>organization_id is the id of the organization.</p>"
												},
												"project_id": {
													"type": "string",
													"description": "<p>project_id is the projects id.</p>"
												},
												"region": {
													"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
													"type": "object",
													"properties": {
														"provider": {
															"type": "string",
															"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
														},
														"region": {
															"type": "string",
															"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
														}
													}
												}
											},
											"description": "<p>Location represents a target for an operation in HCP.</p>"
										},
										"latest_iteration": {
											"title": "<p>The bucket's most recent iteration -- this iteration may be complete or\nnot</p>",
											"type": "object",
											"properties": {
												"id": {
													"type": "string",
													"description": "<p>Unique identifier of the iteration; created and set by the HCP Packer\nregistry when the iteration is created.</p>"
												},
												"bucket_slug": {
													"type": "string",
													"description": "<p>Human-readable name for the bucket that this iteration is associated with.</p>"
												},
												"iteration_ancestor_id": {
													"type": "string",
													"description": "<p>The unique identifier of the iteration that was used as a source\nfor this iteration, if this iteration was built on a base layer.</p>"
												},
												"incremental_version": {
													"type": "integer",
													"format": "int32",
													"description": "<p>The human-readable version number assigned to this iteration. This\nfield will only be set if the iteration is \"complete\".</p>"
												},
												"complete": {
													"type": "boolean",
													"description": "<p>If true, all builds associated with this iteration have successfully\ncompleted and uploaded metadata to the registry. When \"complete\" is true,\nThis iteration is considered ready to use, and can have channels assigned\nto it.</p>"
												},
												"author_id": {
													"type": "string",
													"description": "<p>The name of the person who created this iteration.</p>"
												},
												"created_at": {
													"type": "string",
													"format": "date-time",
													"description": "<p>When the iteration was created.</p>"
												},
												"updated_at": {
													"type": "string",
													"format": "date-time",
													"description": "<p>When the iteration was last updated.</p>"
												},
												"fingerprint": {
													"type": "string",
													"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
												},
												"builds": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"id": {
																"type": "string",
																"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
															},
															"iteration_id": {
																"type": "string",
																"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
															},
															"component_type": {
																"type": "string",
																"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
															},
															"packer_run_uuid": {
																"type": "string",
																"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
															},
															"images": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"id": {
																			"type": "string",
																			"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
																		},
																		"image_id": {
																			"type": "string",
																			"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
																		},
																		"region": {
																			"type": "string",
																			"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
																		},
																		"created_at": {
																			"type": "string",
																			"format": "date-time",
																			"title": "<p>Timestamp at which this image was created</p>"
																		}
																	},
																	"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
																},
																"description": "<p>List of images associated with this build.</p>"
															},
															"cloud_provider": {
																"type": "string",
																"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
															},
															"status": {
																"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
																"type": "string",
																"enum": [
																	"UNSET",
																	"RUNNING",
																	"DONE",
																	"CANCELLED",
																	"FAILED"
																],
																"default": "UNSET",
																"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
															},
															"created_at": {
																"type": "string",
																"format": "date-time",
																"description": "<p>When the build was created.</p>"
															},
															"updated_at": {
																"type": "string",
																"format": "date-time",
																"description": "<p>When the build was most recently updated.</p>"
															},
															"labels": {
																"type": "object",
																"additionalProperties": {
																	"type": "string"
																},
																"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
															}
														}
													},
													"description": "<p>A list of all the builds associated with this iteration.</p>"
												}
											}
										},
										"latest_version": {
											"type": "integer",
											"format": "int32",
											"description": "<p>The human-readable version of the most recent completed iteration in\nthis bucket.</p>"
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the bucket was created.</p>"
										},
										"updated_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the bucket was last updated.</p>"
										},
										"platforms": {
											"type": "array",
											"items": {
												"type": "string"
											},
											"description": "<p>A list of which cloud providers or other platforms the bucket contains\nbuilds for. For example, AWS, GCP, or Azure.</p>"
										},
										"description": {
											"type": "string",
											"description": "<p>A short description of what this bucket's images are for.</p>"
										},
										"labels": {
											"type": "object",
											"additionalProperties": {
												"type": "string"
											},
											"description": "<p>A key:value map for custom, user-settable metadata about your bucket.</p>"
										},
										"iteration_count": {
											"type": "string",
											"format": "int64",
											"description": "<p>The total number of iterations in this bucket.</p>"
										}
									},
									"description": "<p>Information about the bucket that was created.</p>"
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"type": "object",
							"properties": {
								"bucket_slug": {
									"type": "string",
									"description": "<p>Human-readable name for the bucket.</p>"
								},
								"description": {
									"type": "string",
									"description": "<p>A short description of what this bucket's images are for.</p>"
								},
								"labels": {
									"type": "object",
									"additionalProperties": {
										"type": "string"
									},
									"description": "<p>A key:value map for custom, user-settable metadata about your bucket.</p>"
								},
								"location": {
									"title": "<p>HCP-specific information like project and organization ID</p>",
									"type": "object",
									"properties": {
										"organization_id": {
											"type": "string",
											"description": "<p>organization_id is the id of the organization.</p>"
										},
										"project_id": {
											"type": "string",
											"description": "<p>project_id is the projects id.</p>"
										},
										"region": {
											"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
											"type": "object",
											"properties": {
												"provider": {
													"type": "string",
													"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
												},
												"region": {
													"type": "string",
													"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
												}
											}
										}
									},
									"description": "<p>Location represents a target for an operation in HCP.</p>"
								}
							}
						}
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "get",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}",
				"operationId": "GetBucket",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"bucket": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "<p>Unique identifier of the bucket; created and set by the HCP Packer\nregistry when the bucket is created.</p>"
										},
										"slug": {
											"type": "string",
											"description": "<p>Human-readable name for the bucket.</p>"
										},
										"location": {
											"title": "<p>HCP-specific information like project and organization ID</p>",
											"type": "object",
											"properties": {
												"organization_id": {
													"type": "string",
													"description": "<p>organization_id is the id of the organization.</p>"
												},
												"project_id": {
													"type": "string",
													"description": "<p>project_id is the projects id.</p>"
												},
												"region": {
													"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
													"type": "object",
													"properties": {
														"provider": {
															"type": "string",
															"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
														},
														"region": {
															"type": "string",
															"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
														}
													}
												}
											},
											"description": "<p>Location represents a target for an operation in HCP.</p>"
										},
										"latest_iteration": {
											"title": "<p>The bucket's most recent iteration -- this iteration may be complete or\nnot</p>",
											"type": "object",
											"properties": {
												"id": {
													"type": "string",
													"description": "<p>Unique identifier of the iteration; created and set by the HCP Packer\nregistry when the iteration is created.</p>"
												},
												"bucket_slug": {
													"type": "string",
													"description": "<p>Human-readable name for the bucket that this iteration is associated with.</p>"
												},
												"iteration_ancestor_id": {
													"type": "string",
													"description": "<p>The unique identifier of the iteration that was used as a source\nfor this iteration, if this iteration was built on a base layer.</p>"
												},
												"incremental_version": {
													"type": "integer",
													"format": "int32",
													"description": "<p>The human-readable version number assigned to this iteration. This\nfield will only be set if the iteration is \"complete\".</p>"
												},
												"complete": {
													"type": "boolean",
													"description": "<p>If true, all builds associated with this iteration have successfully\ncompleted and uploaded metadata to the registry. When \"complete\" is true,\nThis iteration is considered ready to use, and can have channels assigned\nto it.</p>"
												},
												"author_id": {
													"type": "string",
													"description": "<p>The name of the person who created this iteration.</p>"
												},
												"created_at": {
													"type": "string",
													"format": "date-time",
													"description": "<p>When the iteration was created.</p>"
												},
												"updated_at": {
													"type": "string",
													"format": "date-time",
													"description": "<p>When the iteration was last updated.</p>"
												},
												"fingerprint": {
													"type": "string",
													"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
												},
												"builds": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"id": {
																"type": "string",
																"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
															},
															"iteration_id": {
																"type": "string",
																"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
															},
															"component_type": {
																"type": "string",
																"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
															},
															"packer_run_uuid": {
																"type": "string",
																"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
															},
															"images": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"id": {
																			"type": "string",
																			"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
																		},
																		"image_id": {
																			"type": "string",
																			"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
																		},
																		"region": {
																			"type": "string",
																			"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
																		},
																		"created_at": {
																			"type": "string",
																			"format": "date-time",
																			"title": "<p>Timestamp at which this image was created</p>"
																		}
																	},
																	"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
																},
																"description": "<p>List of images associated with this build.</p>"
															},
															"cloud_provider": {
																"type": "string",
																"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
															},
															"status": {
																"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
																"type": "string",
																"enum": [
																	"UNSET",
																	"RUNNING",
																	"DONE",
																	"CANCELLED",
																	"FAILED"
																],
																"default": "UNSET",
																"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
															},
															"created_at": {
																"type": "string",
																"format": "date-time",
																"description": "<p>When the build was created.</p>"
															},
															"updated_at": {
																"type": "string",
																"format": "date-time",
																"description": "<p>When the build was most recently updated.</p>"
															},
															"labels": {
																"type": "object",
																"additionalProperties": {
																	"type": "string"
																},
																"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
															}
														}
													},
													"description": "<p>A list of all the builds associated with this iteration.</p>"
												}
											}
										},
										"latest_version": {
											"type": "integer",
											"format": "int32",
											"description": "<p>The human-readable version of the most recent completed iteration in\nthis bucket.</p>"
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the bucket was created.</p>"
										},
										"updated_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the bucket was last updated.</p>"
										},
										"platforms": {
											"type": "array",
											"items": {
												"type": "string"
											},
											"description": "<p>A list of which cloud providers or other platforms the bucket contains\nbuilds for. For example, AWS, GCP, or Azure.</p>"
										},
										"description": {
											"type": "string",
											"description": "<p>A short description of what this bucket's images are for.</p>"
										},
										"labels": {
											"type": "object",
											"additionalProperties": {
												"type": "string"
											},
											"description": "<p>A key:value map for custom, user-settable metadata about your bucket.</p>"
										},
										"iteration_count": {
											"type": "string",
											"format": "int64",
											"description": "<p>The total number of iterations in this bucket.</p>"
										}
									},
									"description": "<p>The requested information about the bucket.</p>"
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "bucket_id",
						"description": "<p>Unique identifier of the bucket; created and set by the HCP Packer\nregistry when the bucket is created.</p>",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "delete",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}",
				"operationId": "DeleteBucket",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object"
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "patch",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}",
				"operationId": "UpdateBucket",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"bucket": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "<p>Unique identifier of the bucket; created and set by the HCP Packer\nregistry when the bucket is created.</p>"
										},
										"slug": {
											"type": "string",
											"description": "<p>Human-readable name for the bucket.</p>"
										},
										"location": {
											"title": "<p>HCP-specific information like project and organization ID</p>",
											"type": "object",
											"properties": {
												"organization_id": {
													"type": "string",
													"description": "<p>organization_id is the id of the organization.</p>"
												},
												"project_id": {
													"type": "string",
													"description": "<p>project_id is the projects id.</p>"
												},
												"region": {
													"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
													"type": "object",
													"properties": {
														"provider": {
															"type": "string",
															"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
														},
														"region": {
															"type": "string",
															"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
														}
													}
												}
											},
											"description": "<p>Location represents a target for an operation in HCP.</p>"
										},
										"latest_iteration": {
											"title": "<p>The bucket's most recent iteration -- this iteration may be complete or\nnot</p>",
											"type": "object",
											"properties": {
												"id": {
													"type": "string",
													"description": "<p>Unique identifier of the iteration; created and set by the HCP Packer\nregistry when the iteration is created.</p>"
												},
												"bucket_slug": {
													"type": "string",
													"description": "<p>Human-readable name for the bucket that this iteration is associated with.</p>"
												},
												"iteration_ancestor_id": {
													"type": "string",
													"description": "<p>The unique identifier of the iteration that was used as a source\nfor this iteration, if this iteration was built on a base layer.</p>"
												},
												"incremental_version": {
													"type": "integer",
													"format": "int32",
													"description": "<p>The human-readable version number assigned to this iteration. This\nfield will only be set if the iteration is \"complete\".</p>"
												},
												"complete": {
													"type": "boolean",
													"description": "<p>If true, all builds associated with this iteration have successfully\ncompleted and uploaded metadata to the registry. When \"complete\" is true,\nThis iteration is considered ready to use, and can have channels assigned\nto it.</p>"
												},
												"author_id": {
													"type": "string",
													"description": "<p>The name of the person who created this iteration.</p>"
												},
												"created_at": {
													"type": "string",
													"format": "date-time",
													"description": "<p>When the iteration was created.</p>"
												},
												"updated_at": {
													"type": "string",
													"format": "date-time",
													"description": "<p>When the iteration was last updated.</p>"
												},
												"fingerprint": {
													"type": "string",
													"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
												},
												"builds": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"id": {
																"type": "string",
																"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
															},
															"iteration_id": {
																"type": "string",
																"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
															},
															"component_type": {
																"type": "string",
																"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
															},
															"packer_run_uuid": {
																"type": "string",
																"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
															},
															"images": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"id": {
																			"type": "string",
																			"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
																		},
																		"image_id": {
																			"type": "string",
																			"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
																		},
																		"region": {
																			"type": "string",
																			"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
																		},
																		"created_at": {
																			"type": "string",
																			"format": "date-time",
																			"title": "<p>Timestamp at which this image was created</p>"
																		}
																	},
																	"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
																},
																"description": "<p>List of images associated with this build.</p>"
															},
															"cloud_provider": {
																"type": "string",
																"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
															},
															"status": {
																"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
																"type": "string",
																"enum": [
																	"UNSET",
																	"RUNNING",
																	"DONE",
																	"CANCELLED",
																	"FAILED"
																],
																"default": "UNSET",
																"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
															},
															"created_at": {
																"type": "string",
																"format": "date-time",
																"description": "<p>When the build was created.</p>"
															},
															"updated_at": {
																"type": "string",
																"format": "date-time",
																"description": "<p>When the build was most recently updated.</p>"
															},
															"labels": {
																"type": "object",
																"additionalProperties": {
																	"type": "string"
																},
																"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
															}
														}
													},
													"description": "<p>A list of all the builds associated with this iteration.</p>"
												}
											}
										},
										"latest_version": {
											"type": "integer",
											"format": "int32",
											"description": "<p>The human-readable version of the most recent completed iteration in\nthis bucket.</p>"
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the bucket was created.</p>"
										},
										"updated_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the bucket was last updated.</p>"
										},
										"platforms": {
											"type": "array",
											"items": {
												"type": "string"
											},
											"description": "<p>A list of which cloud providers or other platforms the bucket contains\nbuilds for. For example, AWS, GCP, or Azure.</p>"
										},
										"description": {
											"type": "string",
											"description": "<p>A short description of what this bucket's images are for.</p>"
										},
										"labels": {
											"type": "object",
											"additionalProperties": {
												"type": "string"
											},
											"description": "<p>A key:value map for custom, user-settable metadata about your bucket.</p>"
										},
										"iteration_count": {
											"type": "string",
											"format": "int64",
											"description": "<p>The total number of iterations in this bucket.</p>"
										}
									},
									"description": "<p>Information about the bucket that was updated.</p>"
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"type": "object",
							"properties": {
								"location": {
									"title": "<p>HCP-specific information like project and organization ID</p>",
									"type": "object",
									"properties": {
										"organization_id": {
											"type": "string",
											"description": "<p>organization_id is the id of the organization.</p>"
										},
										"project_id": {
											"type": "string",
											"description": "<p>project_id is the projects id.</p>"
										},
										"region": {
											"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
											"type": "object",
											"properties": {
												"provider": {
													"type": "string",
													"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
												},
												"region": {
													"type": "string",
													"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
												}
											}
										}
									},
									"description": "<p>Location represents a target for an operation in HCP.</p>"
								},
								"bucket_slug": {
									"type": "string",
									"description": "<p>Human-readable name for the bucket.</p>"
								},
								"platforms": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"description": "<p>A list of which cloud providers or other platforms the bucket contains\nbuilds for. For example, AWS, GCP, or Azure.</p>"
								},
								"description": {
									"type": "string",
									"description": "<p>A short description of what this bucket's images are for.</p>"
								},
								"labels": {
									"type": "object",
									"additionalProperties": {
										"type": "string"
									},
									"description": "<p>A key:value map for custom, user-settable metadata about your bucket.</p>"
								}
							}
						}
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "get",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}/channels",
				"operationId": "ListChannels",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"channels": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string",
												"description": "<p>Unique identifier of the channel. This ID is created and set by the HCP\nPacker registry when the channel is created.</p>"
											},
											"slug": {
												"type": "string",
												"description": "<p>Human-readable name for the channel.</p>"
											},
											"bucket_slug": {
												"type": "string",
												"description": "<p>Human-readable name for the bucket this channel is associated with.</p>"
											},
											"author_id": {
												"type": "string",
												"title": "<p>The author who created the channel</p>"
											},
											"created_at": {
												"type": "string",
												"format": "date-time",
												"description": "<p>When the channel was created.</p>"
											},
											"revoked_at": {
												"type": "string",
												"format": "date-time",
												"description": "<p>When the channel was revoked, if it has been revoked.</p>"
											},
											"revocation_message": {
												"type": "string",
												"description": "<p>A short explanation of why this channel was revoked.</p>"
											},
											"pointer": {
												"description": "<p>A pointer to the iteration currently associated with this channel.</p>",
												"type": "object",
												"properties": {
													"iteration": {
														"title": "<p>The iteration the channel is pointing to</p>",
														"type": "object",
														"properties": {
															"id": {
																"type": "string",
																"description": "<p>Unique identifier of the iteration; created and set by the HCP Packer\nregistry when the iteration is created.</p>"
															},
															"bucket_slug": {
																"type": "string",
																"description": "<p>Human-readable name for the bucket that this iteration is associated with.</p>"
															},
															"iteration_ancestor_id": {
																"type": "string",
																"description": "<p>The unique identifier of the iteration that was used as a source\nfor this iteration, if this iteration was built on a base layer.</p>"
															},
															"incremental_version": {
																"type": "integer",
																"format": "int32",
																"description": "<p>The human-readable version number assigned to this iteration. This\nfield will only be set if the iteration is \"complete\".</p>"
															},
															"complete": {
																"type": "boolean",
																"description": "<p>If true, all builds associated with this iteration have successfully\ncompleted and uploaded metadata to the registry. When \"complete\" is true,\nThis iteration is considered ready to use, and can have channels assigned\nto it.</p>"
															},
															"author_id": {
																"type": "string",
																"description": "<p>The name of the person who created this iteration.</p>"
															},
															"created_at": {
																"type": "string",
																"format": "date-time",
																"description": "<p>When the iteration was created.</p>"
															},
															"updated_at": {
																"type": "string",
																"format": "date-time",
																"description": "<p>When the iteration was last updated.</p>"
															},
															"fingerprint": {
																"type": "string",
																"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
															},
															"builds": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"id": {
																			"type": "string",
																			"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
																		},
																		"iteration_id": {
																			"type": "string",
																			"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
																		},
																		"component_type": {
																			"type": "string",
																			"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
																		},
																		"packer_run_uuid": {
																			"type": "string",
																			"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
																		},
																		"images": {
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"id": {
																						"type": "string",
																						"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
																					},
																					"image_id": {
																						"type": "string",
																						"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
																					},
																					"region": {
																						"type": "string",
																						"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
																					},
																					"created_at": {
																						"type": "string",
																						"format": "date-time",
																						"title": "<p>Timestamp at which this image was created</p>"
																					}
																				},
																				"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
																			},
																			"description": "<p>List of images associated with this build.</p>"
																		},
																		"cloud_provider": {
																			"type": "string",
																			"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
																		},
																		"status": {
																			"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
																			"type": "string",
																			"enum": [
																				"UNSET",
																				"RUNNING",
																				"DONE",
																				"CANCELLED",
																				"FAILED"
																			],
																			"default": "UNSET",
																			"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
																		},
																		"created_at": {
																			"type": "string",
																			"format": "date-time",
																			"description": "<p>When the build was created.</p>"
																		},
																		"updated_at": {
																			"type": "string",
																			"format": "date-time",
																			"description": "<p>When the build was most recently updated.</p>"
																		},
																		"labels": {
																			"type": "object",
																			"additionalProperties": {
																				"type": "string"
																			},
																			"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
																		}
																	}
																},
																"description": "<p>A list of all the builds associated with this iteration.</p>"
															}
														}
													},
													"author_id": {
														"type": "string",
														"title": "<p>The author who pointed the channel to the iteration</p>"
													},
													"created_at": {
														"type": "string",
														"format": "date-time",
														"description": "<p>When the channel pointer was created.</p>"
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket you want to list channels for.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "post",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}/channels",
				"operationId": "CreateChannel",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"channel": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "<p>Unique identifier of the channel. This ID is created and set by the HCP\nPacker registry when the channel is created.</p>"
										},
										"slug": {
											"type": "string",
											"description": "<p>Human-readable name for the channel.</p>"
										},
										"bucket_slug": {
											"type": "string",
											"description": "<p>Human-readable name for the bucket this channel is associated with.</p>"
										},
										"author_id": {
											"type": "string",
											"title": "<p>The author who created the channel</p>"
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the channel was created.</p>"
										},
										"revoked_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the channel was revoked, if it has been revoked.</p>"
										},
										"revocation_message": {
											"type": "string",
											"description": "<p>A short explanation of why this channel was revoked.</p>"
										},
										"pointer": {
											"description": "<p>A pointer to the iteration currently associated with this channel.</p>",
											"type": "object",
											"properties": {
												"iteration": {
													"title": "<p>The iteration the channel is pointing to</p>",
													"type": "object",
													"properties": {
														"id": {
															"type": "string",
															"description": "<p>Unique identifier of the iteration; created and set by the HCP Packer\nregistry when the iteration is created.</p>"
														},
														"bucket_slug": {
															"type": "string",
															"description": "<p>Human-readable name for the bucket that this iteration is associated with.</p>"
														},
														"iteration_ancestor_id": {
															"type": "string",
															"description": "<p>The unique identifier of the iteration that was used as a source\nfor this iteration, if this iteration was built on a base layer.</p>"
														},
														"incremental_version": {
															"type": "integer",
															"format": "int32",
															"description": "<p>The human-readable version number assigned to this iteration. This\nfield will only be set if the iteration is \"complete\".</p>"
														},
														"complete": {
															"type": "boolean",
															"description": "<p>If true, all builds associated with this iteration have successfully\ncompleted and uploaded metadata to the registry. When \"complete\" is true,\nThis iteration is considered ready to use, and can have channels assigned\nto it.</p>"
														},
														"author_id": {
															"type": "string",
															"description": "<p>The name of the person who created this iteration.</p>"
														},
														"created_at": {
															"type": "string",
															"format": "date-time",
															"description": "<p>When the iteration was created.</p>"
														},
														"updated_at": {
															"type": "string",
															"format": "date-time",
															"description": "<p>When the iteration was last updated.</p>"
														},
														"fingerprint": {
															"type": "string",
															"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
														},
														"builds": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"id": {
																		"type": "string",
																		"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
																	},
																	"iteration_id": {
																		"type": "string",
																		"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
																	},
																	"component_type": {
																		"type": "string",
																		"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
																	},
																	"packer_run_uuid": {
																		"type": "string",
																		"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
																	},
																	"images": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"id": {
																					"type": "string",
																					"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
																				},
																				"image_id": {
																					"type": "string",
																					"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
																				},
																				"region": {
																					"type": "string",
																					"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
																				},
																				"created_at": {
																					"type": "string",
																					"format": "date-time",
																					"title": "<p>Timestamp at which this image was created</p>"
																				}
																			},
																			"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
																		},
																		"description": "<p>List of images associated with this build.</p>"
																	},
																	"cloud_provider": {
																		"type": "string",
																		"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
																	},
																	"status": {
																		"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
																		"type": "string",
																		"enum": [
																			"UNSET",
																			"RUNNING",
																			"DONE",
																			"CANCELLED",
																			"FAILED"
																		],
																		"default": "UNSET",
																		"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
																	},
																	"created_at": {
																		"type": "string",
																		"format": "date-time",
																		"description": "<p>When the build was created.</p>"
																	},
																	"updated_at": {
																		"type": "string",
																		"format": "date-time",
																		"description": "<p>When the build was most recently updated.</p>"
																	},
																	"labels": {
																		"type": "object",
																		"additionalProperties": {
																			"type": "string"
																		},
																		"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
																	}
																}
															},
															"description": "<p>A list of all the builds associated with this iteration.</p>"
														}
													}
												},
												"author_id": {
													"type": "string",
													"title": "<p>The author who pointed the channel to the iteration</p>"
												},
												"created_at": {
													"type": "string",
													"format": "date-time",
													"description": "<p>When the channel pointer was created.</p>"
												}
											}
										}
									},
									"description": "<p>Information about the channel that was created.</p>"
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket to associate the channel with.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"type": "object",
							"properties": {
								"slug": {
									"type": "string",
									"description": "<p>Human-readable name for the channel.</p>"
								},
								"bucket_slug": {
									"type": "string",
									"description": "<p>Human-readable name for the bucket to associate the channel with.</p>"
								},
								"incremental_version": {
									"type": "integer",
									"format": "int32",
									"description": "<p>The human-readable version number assigned to this iteration.</p>"
								},
								"iteration_id": {
									"type": "string",
									"description": "<p>Unique identifier of the iteration. This was created and set by the\nHCP Packer registry when the iteration was created.</p>"
								},
								"fingerprint": {
									"type": "string",
									"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
								},
								"location": {
									"title": "<p>HCP-specific information like project and organization ID</p>",
									"type": "object",
									"properties": {
										"organization_id": {
											"type": "string",
											"description": "<p>organization_id is the id of the organization.</p>"
										},
										"project_id": {
											"type": "string",
											"description": "<p>project_id is the projects id.</p>"
										},
										"region": {
											"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
											"type": "object",
											"properties": {
												"provider": {
													"type": "string",
													"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
												},
												"region": {
													"type": "string",
													"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
												}
											}
										}
									},
									"description": "<p>Location represents a target for an operation in HCP.</p>"
								}
							}
						}
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "get",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}/channels/{slug}",
				"operationId": "GetChannel",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"channel": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "<p>Unique identifier of the channel. This ID is created and set by the HCP\nPacker registry when the channel is created.</p>"
										},
										"slug": {
											"type": "string",
											"description": "<p>Human-readable name for the channel.</p>"
										},
										"bucket_slug": {
											"type": "string",
											"description": "<p>Human-readable name for the bucket this channel is associated with.</p>"
										},
										"author_id": {
											"type": "string",
											"title": "<p>The author who created the channel</p>"
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the channel was created.</p>"
										},
										"revoked_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the channel was revoked, if it has been revoked.</p>"
										},
										"revocation_message": {
											"type": "string",
											"description": "<p>A short explanation of why this channel was revoked.</p>"
										},
										"pointer": {
											"description": "<p>A pointer to the iteration currently associated with this channel.</p>",
											"type": "object",
											"properties": {
												"iteration": {
													"title": "<p>The iteration the channel is pointing to</p>",
													"type": "object",
													"properties": {
														"id": {
															"type": "string",
															"description": "<p>Unique identifier of the iteration; created and set by the HCP Packer\nregistry when the iteration is created.</p>"
														},
														"bucket_slug": {
															"type": "string",
															"description": "<p>Human-readable name for the bucket that this iteration is associated with.</p>"
														},
														"iteration_ancestor_id": {
															"type": "string",
															"description": "<p>The unique identifier of the iteration that was used as a source\nfor this iteration, if this iteration was built on a base layer.</p>"
														},
														"incremental_version": {
															"type": "integer",
															"format": "int32",
															"description": "<p>The human-readable version number assigned to this iteration. This\nfield will only be set if the iteration is \"complete\".</p>"
														},
														"complete": {
															"type": "boolean",
															"description": "<p>If true, all builds associated with this iteration have successfully\ncompleted and uploaded metadata to the registry. When \"complete\" is true,\nThis iteration is considered ready to use, and can have channels assigned\nto it.</p>"
														},
														"author_id": {
															"type": "string",
															"description": "<p>The name of the person who created this iteration.</p>"
														},
														"created_at": {
															"type": "string",
															"format": "date-time",
															"description": "<p>When the iteration was created.</p>"
														},
														"updated_at": {
															"type": "string",
															"format": "date-time",
															"description": "<p>When the iteration was last updated.</p>"
														},
														"fingerprint": {
															"type": "string",
															"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
														},
														"builds": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"id": {
																		"type": "string",
																		"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
																	},
																	"iteration_id": {
																		"type": "string",
																		"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
																	},
																	"component_type": {
																		"type": "string",
																		"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
																	},
																	"packer_run_uuid": {
																		"type": "string",
																		"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
																	},
																	"images": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"id": {
																					"type": "string",
																					"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
																				},
																				"image_id": {
																					"type": "string",
																					"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
																				},
																				"region": {
																					"type": "string",
																					"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
																				},
																				"created_at": {
																					"type": "string",
																					"format": "date-time",
																					"title": "<p>Timestamp at which this image was created</p>"
																				}
																			},
																			"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
																		},
																		"description": "<p>List of images associated with this build.</p>"
																	},
																	"cloud_provider": {
																		"type": "string",
																		"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
																	},
																	"status": {
																		"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
																		"type": "string",
																		"enum": [
																			"UNSET",
																			"RUNNING",
																			"DONE",
																			"CANCELLED",
																			"FAILED"
																		],
																		"default": "UNSET",
																		"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
																	},
																	"created_at": {
																		"type": "string",
																		"format": "date-time",
																		"description": "<p>When the build was created.</p>"
																	},
																	"updated_at": {
																		"type": "string",
																		"format": "date-time",
																		"description": "<p>When the build was most recently updated.</p>"
																	},
																	"labels": {
																		"type": "object",
																		"additionalProperties": {
																			"type": "string"
																		},
																		"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
																	}
																}
															},
															"description": "<p>A list of all the builds associated with this iteration.</p>"
														}
													}
												},
												"author_id": {
													"type": "string",
													"title": "<p>The author who pointed the channel to the iteration</p>"
												},
												"created_at": {
													"type": "string",
													"format": "date-time",
													"description": "<p>When the channel pointer was created.</p>"
												}
											}
										}
									},
									"description": "<p>The requested channel information.</p>"
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket that the channel is associated with.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "slug",
						"description": "<p>Human-readable name for the channel.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "delete",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}/channels/{slug}",
				"operationId": "DeleteChannel",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object"
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket that the channel is associated with.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "slug",
						"description": "<p>Human-readable name for the channel.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "revocation_message",
						"description": "<p>Optional field to provide the reason for why this channel is being revoked.\nOnly useful for a channel that is assigned to an iteration.</p>",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "patch",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}/channels/{slug}",
				"operationId": "UpdateChannel",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"channel": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "<p>Unique identifier of the channel. This ID is created and set by the HCP\nPacker registry when the channel is created.</p>"
										},
										"slug": {
											"type": "string",
											"description": "<p>Human-readable name for the channel.</p>"
										},
										"bucket_slug": {
											"type": "string",
											"description": "<p>Human-readable name for the bucket this channel is associated with.</p>"
										},
										"author_id": {
											"type": "string",
											"title": "<p>The author who created the channel</p>"
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the channel was created.</p>"
										},
										"revoked_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the channel was revoked, if it has been revoked.</p>"
										},
										"revocation_message": {
											"type": "string",
											"description": "<p>A short explanation of why this channel was revoked.</p>"
										},
										"pointer": {
											"description": "<p>A pointer to the iteration currently associated with this channel.</p>",
											"type": "object",
											"properties": {
												"iteration": {
													"title": "<p>The iteration the channel is pointing to</p>",
													"type": "object",
													"properties": {
														"id": {
															"type": "string",
															"description": "<p>Unique identifier of the iteration; created and set by the HCP Packer\nregistry when the iteration is created.</p>"
														},
														"bucket_slug": {
															"type": "string",
															"description": "<p>Human-readable name for the bucket that this iteration is associated with.</p>"
														},
														"iteration_ancestor_id": {
															"type": "string",
															"description": "<p>The unique identifier of the iteration that was used as a source\nfor this iteration, if this iteration was built on a base layer.</p>"
														},
														"incremental_version": {
															"type": "integer",
															"format": "int32",
															"description": "<p>The human-readable version number assigned to this iteration. This\nfield will only be set if the iteration is \"complete\".</p>"
														},
														"complete": {
															"type": "boolean",
															"description": "<p>If true, all builds associated with this iteration have successfully\ncompleted and uploaded metadata to the registry. When \"complete\" is true,\nThis iteration is considered ready to use, and can have channels assigned\nto it.</p>"
														},
														"author_id": {
															"type": "string",
															"description": "<p>The name of the person who created this iteration.</p>"
														},
														"created_at": {
															"type": "string",
															"format": "date-time",
															"description": "<p>When the iteration was created.</p>"
														},
														"updated_at": {
															"type": "string",
															"format": "date-time",
															"description": "<p>When the iteration was last updated.</p>"
														},
														"fingerprint": {
															"type": "string",
															"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
														},
														"builds": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"id": {
																		"type": "string",
																		"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
																	},
																	"iteration_id": {
																		"type": "string",
																		"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
																	},
																	"component_type": {
																		"type": "string",
																		"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
																	},
																	"packer_run_uuid": {
																		"type": "string",
																		"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
																	},
																	"images": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"id": {
																					"type": "string",
																					"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
																				},
																				"image_id": {
																					"type": "string",
																					"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
																				},
																				"region": {
																					"type": "string",
																					"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
																				},
																				"created_at": {
																					"type": "string",
																					"format": "date-time",
																					"title": "<p>Timestamp at which this image was created</p>"
																				}
																			},
																			"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
																		},
																		"description": "<p>List of images associated with this build.</p>"
																	},
																	"cloud_provider": {
																		"type": "string",
																		"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
																	},
																	"status": {
																		"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
																		"type": "string",
																		"enum": [
																			"UNSET",
																			"RUNNING",
																			"DONE",
																			"CANCELLED",
																			"FAILED"
																		],
																		"default": "UNSET",
																		"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
																	},
																	"created_at": {
																		"type": "string",
																		"format": "date-time",
																		"description": "<p>When the build was created.</p>"
																	},
																	"updated_at": {
																		"type": "string",
																		"format": "date-time",
																		"description": "<p>When the build was most recently updated.</p>"
																	},
																	"labels": {
																		"type": "object",
																		"additionalProperties": {
																			"type": "string"
																		},
																		"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
																	}
																}
															},
															"description": "<p>A list of all the builds associated with this iteration.</p>"
														}
													}
												},
												"author_id": {
													"type": "string",
													"title": "<p>The author who pointed the channel to the iteration</p>"
												},
												"created_at": {
													"type": "string",
													"format": "date-time",
													"description": "<p>When the channel pointer was created.</p>"
												}
											}
										}
									}
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket that the channel is associated with.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "slug",
						"description": "<p>Human-readable name for the channel.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"type": "object",
							"properties": {
								"slug": {
									"type": "string",
									"description": "<p>Human-readable name for the channel.</p>"
								},
								"bucket_slug": {
									"type": "string",
									"description": "<p>Human-readable name for the bucket that the channel is associated with.</p>"
								},
								"incremental_version": {
									"type": "integer",
									"format": "int32",
									"description": "<p>The human-readable version number assigned to this iteration.</p>"
								},
								"iteration_id": {
									"type": "string",
									"description": "<p>Unique identifier of the iteration. This was created and set by the\nHCP Packer registry when the iteration was created.</p>"
								},
								"fingerprint": {
									"type": "string",
									"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
								},
								"ratify": {
									"type": "boolean",
									"title": "<p>Ratifies a revoked channel prior to the update</p>"
								},
								"location": {
									"title": "<p>HCP-specific information like project and organization ID</p>",
									"type": "object",
									"properties": {
										"organization_id": {
											"type": "string",
											"description": "<p>organization_id is the id of the organization.</p>"
										},
										"project_id": {
											"type": "string",
											"description": "<p>project_id is the projects id.</p>"
										},
										"region": {
											"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
											"type": "object",
											"properties": {
												"provider": {
													"type": "string",
													"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
												},
												"region": {
													"type": "string",
													"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
												}
											}
										}
									},
									"description": "<p>Location represents a target for an operation in HCP.</p>"
								}
							}
						}
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "get",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}/iteration",
				"summary": "<p>GetIteration allows the user to retrieve an iteration using one of the following identifiers:</p>\n<ul>\n<li>iteration_id</li>\n<li>incremental_version</li>\n<li>fingerprint</li>\n</ul>",
				"description": "<p>These are supplied as a query parameter. For example:\nimages/{bucket_slug}/iteration?fingerprint={fingerprint}</p>\n<p>bucket_slug must always be set because it is possible for iterations to\nhave the same incremental_version or fingerprint across buckets</p>",
				"operationId": "GetIteration",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"iteration": {
									"description": "<p>The requested iteration.</p>",
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "<p>Unique identifier of the iteration; created and set by the HCP Packer\nregistry when the iteration is created.</p>"
										},
										"bucket_slug": {
											"type": "string",
											"description": "<p>Human-readable name for the bucket that this iteration is associated with.</p>"
										},
										"iteration_ancestor_id": {
											"type": "string",
											"description": "<p>The unique identifier of the iteration that was used as a source\nfor this iteration, if this iteration was built on a base layer.</p>"
										},
										"incremental_version": {
											"type": "integer",
											"format": "int32",
											"description": "<p>The human-readable version number assigned to this iteration. This\nfield will only be set if the iteration is \"complete\".</p>"
										},
										"complete": {
											"type": "boolean",
											"description": "<p>If true, all builds associated with this iteration have successfully\ncompleted and uploaded metadata to the registry. When \"complete\" is true,\nThis iteration is considered ready to use, and can have channels assigned\nto it.</p>"
										},
										"author_id": {
											"type": "string",
											"description": "<p>The name of the person who created this iteration.</p>"
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the iteration was created.</p>"
										},
										"updated_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the iteration was last updated.</p>"
										},
										"fingerprint": {
											"type": "string",
											"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
										},
										"builds": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"id": {
														"type": "string",
														"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
													},
													"iteration_id": {
														"type": "string",
														"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
													},
													"component_type": {
														"type": "string",
														"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
													},
													"packer_run_uuid": {
														"type": "string",
														"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
													},
													"images": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"id": {
																	"type": "string",
																	"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
																},
																"image_id": {
																	"type": "string",
																	"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
																},
																"region": {
																	"type": "string",
																	"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
																},
																"created_at": {
																	"type": "string",
																	"format": "date-time",
																	"title": "<p>Timestamp at which this image was created</p>"
																}
															},
															"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
														},
														"description": "<p>List of images associated with this build.</p>"
													},
													"cloud_provider": {
														"type": "string",
														"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
													},
													"status": {
														"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
														"type": "string",
														"enum": [
															"UNSET",
															"RUNNING",
															"DONE",
															"CANCELLED",
															"FAILED"
														],
														"default": "UNSET",
														"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
													},
													"created_at": {
														"type": "string",
														"format": "date-time",
														"description": "<p>When the build was created.</p>"
													},
													"updated_at": {
														"type": "string",
														"format": "date-time",
														"description": "<p>When the build was most recently updated.</p>"
													},
													"labels": {
														"type": "object",
														"additionalProperties": {
															"type": "string"
														},
														"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
													}
												}
											},
											"description": "<p>A list of all the builds associated with this iteration.</p>"
										}
									}
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "incremental_version",
						"description": "<p>The human-readable version number assigned to this iteration.</p>",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "iteration_id",
						"description": "<p>Unique identifier of the iteration. This was created and set by the\nHCP Packer registry when the iteration was created.</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "fingerprint",
						"description": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code>.</p>",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "get",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}/iterations",
				"operationId": "ListIterations",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"iterations": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string",
												"description": "<p>Unique identifier of the iteration; created and set by the HCP Packer\nregistry when the iteration is created.</p>"
											},
											"bucket_slug": {
												"type": "string",
												"description": "<p>Human-readable name for the bucket.</p>"
											},
											"iteration_ancestor_id": {
												"type": "string",
												"description": "<p>The unique identifier of the iteration that was used as a source\nfor this iteration, if this iteration was built on a base layer.</p>"
											},
											"incremental_version": {
												"type": "integer",
												"format": "int32",
												"description": "<p>The human-readable version number assigned to this iteration. This\nfield will only be set if the iteration is \"complete\".</p>"
											},
											"complete": {
												"type": "boolean",
												"description": "<p>If true, all builds associated with this iteration have successfully\ncompleted and uploaded metadata to the registry. When \"complete\" is true,\nThis iteration is considered ready to use, and can have channels assigned\nto it.</p>"
											},
											"author_id": {
												"type": "string",
												"description": "<p>Who created the iteration.</p>"
											},
											"created_at": {
												"type": "string",
												"format": "date-time",
												"description": "<p>When the iteration was created.</p>"
											},
											"updated_at": {
												"type": "string",
												"format": "date-time",
												"description": "<p>When the iteration was most recently updated.</p>"
											},
											"fingerprint": {
												"type": "string",
												"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
											}
										},
										"description": "<p>The list endpoint does not return build information.</p>"
									},
									"title": "<p>The requested list of iterations</p>"
								},
								"pagination": {
									"description": "<p>Pagination tokens for a subsequent request.</p>",
									"type": "object",
									"properties": {
										"next_page_token": {
											"type": "string",
											"description": "<p>This token allows you to get the next page of results for list requests.\nIf the number of results is larger than <code>page_size</code>, use the\n<code>next_page_token</code> as a value for the query parameter <code>next_page_token</code> in\nthe next request. The value will become empty when there are no more pages.</p>"
										},
										"previous_page_token": {
											"type": "string",
											"description": "<p>This token allows you to get the previous page of results for list\nrequests. If the number of results is larger than <code>page_size</code>, use the\n<code>previous_page_token</code> as a value for the query parameter\n<code>previous_page_token</code> in the next request. The value will become empty when\nthere are no more pages.</p>"
										}
									}
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "include_incomplete",
						"description": "<p>If true, the request will return information about iterations that have\nnot been marked \"complete\". By default, this is false and the list\nrequest will only return information about \"complete\" iterations that are\nready for use.</p>",
						"in": "query",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "pagination.page_size",
						"description": "<p>The max number of results per page that should be returned. If the number\nof available results is larger than <code>page_size</code>, a <code>next_page_token</code> is\nreturned which can be used to get the next page of results in subsequent\nrequests. A value of zero will cause <code>page_size</code> to be defaulted.</p>",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "pagination.next_page_token",
						"description": "<p>Specifies a page token to use to retrieve the next page. Set this to the\n<code>next_page_token</code> returned by previous list requests to get the next page of\nresults. If set, <code>previous_page_token</code> must not be set.</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "pagination.previous_page_token",
						"description": "<p>Specifies a page token to use to retrieve the previous page. Set this to\nthe <code>previous_page_token</code> returned by previous list requests to get the\nprevious page of results. If set, <code>next_page_token</code> must not be set.</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "sorting.order_by",
						"description": "<p>Specifies the list of per field ordering that should be used for sorting.\nThe order matters as rows are sorted in order by fields and when the field\nmatches, the next field is used to tie break the ordering.\nThe per field default ordering is ascending.  </p>\n<p>The fields should be immutabile, unique, and orderable. If the field is\nnot unique, more than one sort fields should be passed.</p>\n<p>Example: oder_by=name,age desc,created_at asc\nIn that case, 'name' will get the default 'ascending' order.</p>",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "post",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}/iterations",
				"operationId": "CreateIteration",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"iteration": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "<p>Unique identifier of the iteration; created and set by the HCP Packer\nregistry when the iteration is created.</p>"
										},
										"bucket_slug": {
											"type": "string",
											"description": "<p>Human-readable name for the bucket that this iteration is associated with.</p>"
										},
										"iteration_ancestor_id": {
											"type": "string",
											"description": "<p>The unique identifier of the iteration that was used as a source\nfor this iteration, if this iteration was built on a base layer.</p>"
										},
										"incremental_version": {
											"type": "integer",
											"format": "int32",
											"description": "<p>The human-readable version number assigned to this iteration. This\nfield will only be set if the iteration is \"complete\".</p>"
										},
										"complete": {
											"type": "boolean",
											"description": "<p>If true, all builds associated with this iteration have successfully\ncompleted and uploaded metadata to the registry. When \"complete\" is true,\nThis iteration is considered ready to use, and can have channels assigned\nto it.</p>"
										},
										"author_id": {
											"type": "string",
											"description": "<p>The name of the person who created this iteration.</p>"
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the iteration was created.</p>"
										},
										"updated_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the iteration was last updated.</p>"
										},
										"fingerprint": {
											"type": "string",
											"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
										},
										"builds": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"id": {
														"type": "string",
														"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
													},
													"iteration_id": {
														"type": "string",
														"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
													},
													"component_type": {
														"type": "string",
														"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
													},
													"packer_run_uuid": {
														"type": "string",
														"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
													},
													"images": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"id": {
																	"type": "string",
																	"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
																},
																"image_id": {
																	"type": "string",
																	"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
																},
																"region": {
																	"type": "string",
																	"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
																},
																"created_at": {
																	"type": "string",
																	"format": "date-time",
																	"title": "<p>Timestamp at which this image was created</p>"
																}
															},
															"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
														},
														"description": "<p>List of images associated with this build.</p>"
													},
													"cloud_provider": {
														"type": "string",
														"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
													},
													"status": {
														"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
														"type": "string",
														"enum": [
															"UNSET",
															"RUNNING",
															"DONE",
															"CANCELLED",
															"FAILED"
														],
														"default": "UNSET",
														"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
													},
													"created_at": {
														"type": "string",
														"format": "date-time",
														"description": "<p>When the build was created.</p>"
													},
													"updated_at": {
														"type": "string",
														"format": "date-time",
														"description": "<p>When the build was most recently updated.</p>"
													},
													"labels": {
														"type": "object",
														"additionalProperties": {
															"type": "string"
														},
														"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
													}
												}
											},
											"description": "<p>A list of all the builds associated with this iteration.</p>"
										}
									}
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"type": "object",
							"properties": {
								"location": {
									"title": "<p>HCP-specific information like project and organization ID</p>",
									"type": "object",
									"properties": {
										"organization_id": {
											"type": "string",
											"description": "<p>organization_id is the id of the organization.</p>"
										},
										"project_id": {
											"type": "string",
											"description": "<p>project_id is the projects id.</p>"
										},
										"region": {
											"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
											"type": "object",
											"properties": {
												"provider": {
													"type": "string",
													"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
												},
												"region": {
													"type": "string",
													"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
												}
											}
										}
									},
									"description": "<p>Location represents a target for an operation in HCP.</p>"
								},
								"bucket_slug": {
									"type": "string",
									"description": "<p>Human-readable name for the bucket.</p>"
								},
								"fingerprint": {
									"type": "string",
									"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
								}
							}
						}
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "get",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}/iterations/{incremental_version}/ancestors",
				"summary": "<p>API Endpoints to ease UI implementation</p>",
				"operationId": "GetAncestorImages",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"ancestors": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string",
												"description": "<p>Unique identifier of the iteration; created and set by the HCP Packer\nregistry when the iteration is created.</p>"
											},
											"bucket_slug": {
												"type": "string",
												"description": "<p>Human-readable name for the bucket that this iteration is associated with.</p>"
											},
											"iteration_ancestor_id": {
												"type": "string",
												"description": "<p>The unique identifier of the iteration that was used as a source\nfor this iteration, if this iteration was built on a base layer.</p>"
											},
											"incremental_version": {
												"type": "integer",
												"format": "int32",
												"description": "<p>The human-readable version number assigned to this iteration. This\nfield will only be set if the iteration is \"complete\".</p>"
											},
											"complete": {
												"type": "boolean",
												"description": "<p>If true, all builds associated with this iteration have successfully\ncompleted and uploaded metadata to the registry. When \"complete\" is true,\nThis iteration is considered ready to use, and can have channels assigned\nto it.</p>"
											},
											"author_id": {
												"type": "string",
												"description": "<p>The name of the person who created this iteration.</p>"
											},
											"created_at": {
												"type": "string",
												"format": "date-time",
												"description": "<p>When the iteration was created.</p>"
											},
											"updated_at": {
												"type": "string",
												"format": "date-time",
												"description": "<p>When the iteration was last updated.</p>"
											},
											"fingerprint": {
												"type": "string",
												"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
											},
											"builds": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"id": {
															"type": "string",
															"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
														},
														"iteration_id": {
															"type": "string",
															"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
														},
														"component_type": {
															"type": "string",
															"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
														},
														"packer_run_uuid": {
															"type": "string",
															"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
														},
														"images": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"id": {
																		"type": "string",
																		"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
																	},
																	"image_id": {
																		"type": "string",
																		"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
																	},
																	"region": {
																		"type": "string",
																		"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
																	},
																	"created_at": {
																		"type": "string",
																		"format": "date-time",
																		"title": "<p>Timestamp at which this image was created</p>"
																	}
																},
																"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
															},
															"description": "<p>List of images associated with this build.</p>"
														},
														"cloud_provider": {
															"type": "string",
															"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
														},
														"status": {
															"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
															"type": "string",
															"enum": [
																"UNSET",
																"RUNNING",
																"DONE",
																"CANCELLED",
																"FAILED"
															],
															"default": "UNSET",
															"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
														},
														"created_at": {
															"type": "string",
															"format": "date-time",
															"description": "<p>When the build was created.</p>"
														},
														"updated_at": {
															"type": "string",
															"format": "date-time",
															"description": "<p>When the build was most recently updated.</p>"
														},
														"labels": {
															"type": "object",
															"additionalProperties": {
																"type": "string"
															},
															"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
														}
													}
												},
												"description": "<p>A list of all the builds associated with this iteration.</p>"
											}
										}
									}
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "incremental_version",
						"description": "<p>The human-readable version number assigned to this iteration.</p>",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "get",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}/iterations/{incremental_version}/children",
				"operationId": "GetChildImages",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"children": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string",
												"description": "<p>Unique identifier of the iteration; created and set by the HCP Packer\nregistry when the iteration is created.</p>"
											},
											"bucket_slug": {
												"type": "string",
												"description": "<p>Human-readable name for the bucket that this iteration is associated with.</p>"
											},
											"iteration_ancestor_id": {
												"type": "string",
												"description": "<p>The unique identifier of the iteration that was used as a source\nfor this iteration, if this iteration was built on a base layer.</p>"
											},
											"incremental_version": {
												"type": "integer",
												"format": "int32",
												"description": "<p>The human-readable version number assigned to this iteration. This\nfield will only be set if the iteration is \"complete\".</p>"
											},
											"complete": {
												"type": "boolean",
												"description": "<p>If true, all builds associated with this iteration have successfully\ncompleted and uploaded metadata to the registry. When \"complete\" is true,\nThis iteration is considered ready to use, and can have channels assigned\nto it.</p>"
											},
											"author_id": {
												"type": "string",
												"description": "<p>The name of the person who created this iteration.</p>"
											},
											"created_at": {
												"type": "string",
												"format": "date-time",
												"description": "<p>When the iteration was created.</p>"
											},
											"updated_at": {
												"type": "string",
												"format": "date-time",
												"description": "<p>When the iteration was last updated.</p>"
											},
											"fingerprint": {
												"type": "string",
												"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
											},
											"builds": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"id": {
															"type": "string",
															"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
														},
														"iteration_id": {
															"type": "string",
															"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
														},
														"component_type": {
															"type": "string",
															"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
														},
														"packer_run_uuid": {
															"type": "string",
															"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
														},
														"images": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"id": {
																		"type": "string",
																		"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
																	},
																	"image_id": {
																		"type": "string",
																		"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
																	},
																	"region": {
																		"type": "string",
																		"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
																	},
																	"created_at": {
																		"type": "string",
																		"format": "date-time",
																		"title": "<p>Timestamp at which this image was created</p>"
																	}
																},
																"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
															},
															"description": "<p>List of images associated with this build.</p>"
														},
														"cloud_provider": {
															"type": "string",
															"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
														},
														"status": {
															"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
															"type": "string",
															"enum": [
																"UNSET",
																"RUNNING",
																"DONE",
																"CANCELLED",
																"FAILED"
															],
															"default": "UNSET",
															"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
														},
														"created_at": {
															"type": "string",
															"format": "date-time",
															"description": "<p>When the build was created.</p>"
														},
														"updated_at": {
															"type": "string",
															"format": "date-time",
															"description": "<p>When the build was most recently updated.</p>"
														},
														"labels": {
															"type": "object",
															"additionalProperties": {
																"type": "string"
															},
															"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
														}
													}
												},
												"description": "<p>A list of all the builds associated with this iteration.</p>"
											}
										}
									}
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "incremental_version",
						"description": "<p>The human-readable version number assigned to this iteration.</p>",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "post",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}/iterations/{iteration_id}",
				"operationId": "CreateBuild",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"build": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
										},
										"iteration_id": {
											"type": "string",
											"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
										},
										"component_type": {
											"type": "string",
											"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
										},
										"packer_run_uuid": {
											"type": "string",
											"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
										},
										"images": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"id": {
														"type": "string",
														"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
													},
													"image_id": {
														"type": "string",
														"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
													},
													"region": {
														"type": "string",
														"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
													},
													"created_at": {
														"type": "string",
														"format": "date-time",
														"title": "<p>Timestamp at which this image was created</p>"
													}
												},
												"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
											},
											"description": "<p>List of images associated with this build.</p>"
										},
										"cloud_provider": {
											"type": "string",
											"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
										},
										"status": {
											"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
											"type": "string",
											"enum": [
												"UNSET",
												"RUNNING",
												"DONE",
												"CANCELLED",
												"FAILED"
											],
											"default": "UNSET",
											"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the build was created.</p>"
										},
										"updated_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the build was most recently updated.</p>"
										},
										"labels": {
											"type": "object",
											"additionalProperties": {
												"type": "string"
											},
											"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
										}
									},
									"description": "<p>Information about the build that was created.</p>"
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "iteration_id",
						"description": "<p>Unique identifier of the iteration that this build should be associated\nwith.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"type": "object",
							"properties": {
								"location": {
									"title": "<p>HCP-specific information like project and organization ID</p>",
									"type": "object",
									"properties": {
										"organization_id": {
											"type": "string",
											"description": "<p>organization_id is the id of the organization.</p>"
										},
										"project_id": {
											"type": "string",
											"description": "<p>project_id is the projects id.</p>"
										},
										"region": {
											"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
											"type": "object",
											"properties": {
												"provider": {
													"type": "string",
													"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
												},
												"region": {
													"type": "string",
													"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
												}
											}
										}
									},
									"description": "<p>Location represents a target for an operation in HCP.</p>"
								},
								"bucket_slug": {
									"type": "string",
									"description": "<p>Human-readable name for the bucket.</p>"
								},
								"build": {
									"description": "<p>Information about the build to create.</p>",
									"type": "object",
									"properties": {
										"component_type": {
											"type": "string",
											"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
										},
										"packer_run_uuid": {
											"type": "string",
											"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
										},
										"images": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"image_id": {
														"type": "string",
														"description": "<p>ID or URL of the remote cloud image as given by a build.</p>"
													},
													"region": {
														"type": "string",
														"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
													}
												},
												"description": "<p>This message is used for build/create calls; it removes elements from the\nImage message that the user cannot set.</p>"
											},
											"description": "<p>List of images associated with this build.</p>"
										},
										"cloud_provider": {
											"type": "string",
											"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
										},
										"status": {
											"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
											"type": "string",
											"enum": [
												"UNSET",
												"RUNNING",
												"DONE",
												"CANCELLED",
												"FAILED"
											],
											"default": "UNSET",
											"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
										},
										"labels": {
											"type": "object",
											"additionalProperties": {
												"type": "string"
											},
											"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
										}
									}
								},
								"fingerprint": {
									"type": "string",
									"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
								},
								"iteration_id": {
									"type": "string",
									"description": "<p>Unique identifier of the iteration that this build should be associated\nwith.</p>"
								}
							}
						}
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "get",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/images/{bucket_slug}/iterations/{iteration_id}/builds",
				"operationId": "ListBuilds",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"location": {
									"title": "<p>HCP-specific information like project and organization ID</p>",
									"type": "object",
									"properties": {
										"organization_id": {
											"type": "string",
											"description": "<p>organization_id is the id of the organization.</p>"
										},
										"project_id": {
											"type": "string",
											"description": "<p>project_id is the projects id.</p>"
										},
										"region": {
											"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
											"type": "object",
											"properties": {
												"provider": {
													"type": "string",
													"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
												},
												"region": {
													"type": "string",
													"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
												}
											}
										}
									},
									"description": "<p>Location represents a target for an operation in HCP.</p>"
								},
								"pagination": {
									"description": "<p>Pagination tokens for a subsequent request.</p>",
									"type": "object",
									"properties": {
										"next_page_token": {
											"type": "string",
											"description": "<p>This token allows you to get the next page of results for list requests.\nIf the number of results is larger than <code>page_size</code>, use the\n<code>next_page_token</code> as a value for the query parameter <code>next_page_token</code> in\nthe next request. The value will become empty when there are no more pages.</p>"
										},
										"previous_page_token": {
											"type": "string",
											"description": "<p>This token allows you to get the previous page of results for list\nrequests. If the number of results is larger than <code>page_size</code>, use the\n<code>previous_page_token</code> as a value for the query parameter\n<code>previous_page_token</code> in the next request. The value will become empty when\nthere are no more pages.</p>"
										}
									}
								},
								"builds": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string",
												"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
											},
											"iteration_id": {
												"type": "string",
												"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
											},
											"component_type": {
												"type": "string",
												"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
											},
											"packer_run_uuid": {
												"type": "string",
												"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
											},
											"images": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"id": {
															"type": "string",
															"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
														},
														"image_id": {
															"type": "string",
															"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
														},
														"region": {
															"type": "string",
															"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
														},
														"created_at": {
															"type": "string",
															"format": "date-time",
															"title": "<p>Timestamp at which this image was created</p>"
														}
													},
													"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
												},
												"description": "<p>List of images associated with this build.</p>"
											},
											"cloud_provider": {
												"type": "string",
												"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
											},
											"status": {
												"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
												"type": "string",
												"enum": [
													"UNSET",
													"RUNNING",
													"DONE",
													"CANCELLED",
													"FAILED"
												],
												"default": "UNSET",
												"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
											},
											"created_at": {
												"type": "string",
												"format": "date-time",
												"description": "<p>When the build was created.</p>"
											},
											"updated_at": {
												"type": "string",
												"format": "date-time",
												"description": "<p>When the build was most recently updated.</p>"
											},
											"labels": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
											}
										}
									},
									"description": "<p>The requested list of builds.</p>"
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket to list builds for.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "iteration_id",
						"description": "<p>Unique identifier of the iteration to list builds for; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "pagination.page_size",
						"description": "<p>The max number of results per page that should be returned. If the number\nof available results is larger than <code>page_size</code>, a <code>next_page_token</code> is\nreturned which can be used to get the next page of results in subsequent\nrequests. A value of zero will cause <code>page_size</code> to be defaulted.</p>",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "pagination.next_page_token",
						"description": "<p>Specifies a page token to use to retrieve the next page. Set this to the\n<code>next_page_token</code> returned by previous list requests to get the next page of\nresults. If set, <code>previous_page_token</code> must not be set.</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "pagination.previous_page_token",
						"description": "<p>Specifies a page token to use to retrieve the previous page. Set this to\nthe <code>previous_page_token</code> returned by previous list requests to get the\nprevious page of results. If set, <code>next_page_token</code> must not be set.</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "sorting.order_by",
						"description": "<p>Specifies the list of per field ordering that should be used for sorting.\nThe order matters as rows are sorted in order by fields and when the field\nmatches, the next field is used to tie break the ordering.\nThe per field default ordering is ascending.  </p>\n<p>The fields should be immutabile, unique, and orderable. If the field is\nnot unique, more than one sort fields should be passed.</p>\n<p>Example: oder_by=name,age desc,created_at asc\nIn that case, 'name' will get the default 'ascending' order.</p>",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "delete",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/iterations/{iteration_id}",
				"operationId": "DeleteIteration",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object"
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "iteration_id",
						"description": "<p>Unique identifier of the iteration. This was created and set by the\nHCP Packer registry when the iteration was created.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "bucket_slug",
						"description": "<p>Human-readable name for the bucket.</p>",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "patch",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/iterations/{iteration_id}",
				"summary": "<p>UpdateIteration is used to mark an iteration \"complete\", once all builds are complete.\nTo make build-specific updates for builds within the iteration, use the UpdateBuild endpoint.</p>",
				"operationId": "UpdateIteration",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"iteration": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "<p>Unique identifier of the iteration; created and set by the HCP Packer\nregistry when the iteration is created.</p>"
										},
										"bucket_slug": {
											"type": "string",
											"description": "<p>Human-readable name for the bucket that this iteration is associated with.</p>"
										},
										"iteration_ancestor_id": {
											"type": "string",
											"description": "<p>The unique identifier of the iteration that was used as a source\nfor this iteration, if this iteration was built on a base layer.</p>"
										},
										"incremental_version": {
											"type": "integer",
											"format": "int32",
											"description": "<p>The human-readable version number assigned to this iteration. This\nfield will only be set if the iteration is \"complete\".</p>"
										},
										"complete": {
											"type": "boolean",
											"description": "<p>If true, all builds associated with this iteration have successfully\ncompleted and uploaded metadata to the registry. When \"complete\" is true,\nThis iteration is considered ready to use, and can have channels assigned\nto it.</p>"
										},
										"author_id": {
											"type": "string",
											"description": "<p>The name of the person who created this iteration.</p>"
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the iteration was created.</p>"
										},
										"updated_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>When the iteration was last updated.</p>"
										},
										"fingerprint": {
											"type": "string",
											"title": "<p>Fingerprint of the iteration. The fingerprint is set by Packer when you\ncall <code>packer build</code>. It will most often correspond to a git commit sha,\nbut can be manually overridden by setting the environment variable\n<code>HCP_PACKER_BUILD_FINGERPRINT</code></p>"
										},
										"builds": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"id": {
														"type": "string",
														"description": "<p>Unique identifier of the build; created and set by the HCP Packer\nregistry when the build is created.</p>"
													},
													"iteration_id": {
														"type": "string",
														"description": "<p>Unique identifier of the iteration associated with this build; this was\ncreated and set by the HCP Packer registry when the iteration was created.</p>"
													},
													"component_type": {
														"type": "string",
														"title": "<p>Internal Packer name for the builder or post-processor component used to\nbuild this. For example, \"amazon-ebs\" or \"azure-arm\"</p>"
													},
													"packer_run_uuid": {
														"type": "string",
														"description": "<p>The UUID specific to this call to Packer build. If you use the manifest\npost-processor, this UUID will match the UUID present there.</p>"
													},
													"images": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"id": {
																	"type": "string",
																	"description": "<p>Unique identifier for the image; created and set by the HCP Packer\nregistry when the image is created.</p>"
																},
																"image_id": {
																	"type": "string",
																	"title": "<p>ID or URL of the remote cloud image as given by a build. For example,\nami-12345</p>"
																},
																"region": {
																	"type": "string",
																	"description": "<p>Cloud-specific region as provided by <code>packer build</code>. For example,\n\"ap-east-1\".</p>"
																},
																"created_at": {
																	"type": "string",
																	"format": "date-time",
																	"title": "<p>Timestamp at which this image was created</p>"
																}
															},
															"description": "<p>Represents the actual region:image_id mapping for a single image, in a\nsingle build.</p>"
														},
														"description": "<p>List of images associated with this build.</p>"
													},
													"cloud_provider": {
														"type": "string",
														"description": "<p>The cloud provider that this build produced artifacts for.\nFor example, AWS, GCP, or Azure.</p>"
													},
													"status": {
														"description": "<p>Status of the build. The status can be RUNNING, DONE, CANCELLED, FAILED,\nor UNSET.</p>",
														"type": "string",
														"enum": [
															"UNSET",
															"RUNNING",
															"DONE",
															"CANCELLED",
															"FAILED"
														],
														"default": "UNSET",
														"title": "<ul>\n<li>UNSET: UNSET is a sentinel zero value so that an uninitialized value can be\ndetected.</li>\n<li>RUNNING: Running means the Packer build is currently running</li>\n<li>DONE: Done means the Packer build has finished successfully</li>\n<li>CANCELLED: Cancelled means the Packer build was cancelled by a user</li>\n<li>FAILED: Failed means the Packer build failed and therefore image creation failed</li>\n</ul>"
													},
													"created_at": {
														"type": "string",
														"format": "date-time",
														"description": "<p>When the build was created.</p>"
													},
													"updated_at": {
														"type": "string",
														"format": "date-time",
														"description": "<p>When the build was most recently updated.</p>"
													},
													"labels": {
														"type": "object",
														"additionalProperties": {
															"type": "string"
														},
														"description": "<p>A key:value map for custom, user-settable metadata about your build.</p>"
													}
												}
											},
											"description": "<p>A list of all the builds associated with this iteration.</p>"
										}
									},
									"description": "<p>Information about the updated iteration.</p>"
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "iteration_id",
						"description": "<p>Unique identifier of the iteration. This was created and set by the\nHCP Packer registry when the iteration was created.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"type": "object",
							"properties": {
								"location": {
									"title": "<p>HCP-specific information like project and organization ID</p>",
									"type": "object",
									"properties": {
										"organization_id": {
											"type": "string",
											"description": "<p>organization_id is the id of the organization.</p>"
										},
										"project_id": {
											"type": "string",
											"description": "<p>project_id is the projects id.</p>"
										},
										"region": {
											"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
											"type": "object",
											"properties": {
												"provider": {
													"type": "string",
													"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
												},
												"region": {
													"type": "string",
													"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
												}
											}
										}
									},
									"description": "<p>Location represents a target for an operation in HCP.</p>"
								},
								"bucket_slug": {
									"type": "string",
									"description": "<p>Human-readable name for the bucket.</p>"
								},
								"iteration_id": {
									"type": "string",
									"description": "<p>Unique identifier of the iteration. This was created and set by the\nHCP Packer registry when the iteration was created.</p>"
								},
								"complete": {
									"type": "boolean",
									"description": "<p>Set to \"true\" when all builds associated with this iteration have\nsuccessfully completed and uploaded metadata to the registry. When\n\"complete\" is true, this iteration is considered ready to use, and can\nhave channels assigned to it.</p>"
								}
							}
						}
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "get",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/registry",
				"operationId": "GetRegistry",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"registry": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"title": "<p>ULID of the registry</p>"
										},
										"location": {
											"type": "object",
											"properties": {
												"organization_id": {
													"type": "string",
													"description": "<p>organization_id is the id of the organization.</p>"
												},
												"project_id": {
													"type": "string",
													"description": "<p>project_id is the projects id.</p>"
												},
												"region": {
													"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
													"type": "object",
													"properties": {
														"provider": {
															"type": "string",
															"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
														},
														"region": {
															"type": "string",
															"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
														}
													}
												}
											},
											"description": "<p>Location represents a target for an operation in HCP.</p>"
										},
										"config": {
											"type": "object",
											"properties": {
												"feature_tier": {
													"title": "<p>feature_tier is the feature tier for the Registry</p>",
													"type": "string",
													"enum": [
														"UNSET",
														"STARTER",
														"STANDARD",
														"PRIVATE_BETA"
													],
													"default": "UNSET"
												},
												"activated": {
													"type": "boolean",
													"description": "<p>A Registry is activated when the system correctly starts billing for it.</p>"
												}
											},
											"title": "<p>The registry configuration</p>"
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"title": "<p>When the registry was create</p>"
										},
										"updated_at": {
											"type": "string",
											"format": "date-time",
											"title": "<p>When the registry was last updated</p>"
										}
									}
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.region.provider",
						"description": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "location.region.region",
						"description": "<p>region is the cloud region (\"us-west1\", \"us-east1\").</p>",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"tags": ["PackerService"]
			},
			{
				"__type": "put",
				"__path": "/packer/2021-04-30/organizations/{location.organization_id}/projects/{location.project_id}/registry",
				"operationId": "CreateRegistry",
				"responses": {
					"200": {
						"description": "<p>A successful response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"registry": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"title": "<p>ULID of the registry</p>"
										},
										"location": {
											"type": "object",
											"properties": {
												"organization_id": {
													"type": "string",
													"description": "<p>organization_id is the id of the organization.</p>"
												},
												"project_id": {
													"type": "string",
													"description": "<p>project_id is the projects id.</p>"
												},
												"region": {
													"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
													"type": "object",
													"properties": {
														"provider": {
															"type": "string",
															"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
														},
														"region": {
															"type": "string",
															"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
														}
													}
												}
											},
											"description": "<p>Location represents a target for an operation in HCP.</p>"
										},
										"config": {
											"type": "object",
											"properties": {
												"feature_tier": {
													"title": "<p>feature_tier is the feature tier for the Registry</p>",
													"type": "string",
													"enum": [
														"UNSET",
														"STARTER",
														"STANDARD",
														"PRIVATE_BETA"
													],
													"default": "UNSET"
												},
												"activated": {
													"type": "boolean",
													"description": "<p>A Registry is activated when the system correctly starts billing for it.</p>"
												}
											},
											"title": "<p>The registry configuration</p>"
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"title": "<p>When the registry was create</p>"
										},
										"updated_at": {
											"type": "string",
											"format": "date-time",
											"title": "<p>When the registry was last updated</p>"
										}
									}
								},
								"operation": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "<p>id is the unique ID for this operation used in other RPC calls.\nThis ID is only guaranteed to be unique within the region that\nthe operation is running in.</p>"
										},
										"state": {
											"description": "<p>state is the current state of the operation. This is a simple tri-state:\nPENDING means the operation is created but not yet started, RUNNING means\nthe operation is currently running (though it may be very long-running),\nand DONE means the operation is complete whether successfully or not.</p>",
											"type": "string",
											"enum": ["PENDING", "RUNNING", "DONE", "QUEUED"],
											"default": "PENDING"
										},
										"error": {
											"description": "<p>error is the error that occurred in the operation.</p>",
											"type": "object",
											"properties": {
												"code": {
													"type": "integer",
													"format": "int32",
													"description": "<p>The status code, which should be an enum value of\n[google.rpc.Code][google.rpc.Code].</p>"
												},
												"message": {
													"type": "string",
													"description": "<p>A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized\nby the client.</p>"
												},
												"details": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"type_url": {
																"type": "string",
																"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
															},
															"value": {
																"type": "string",
																"format": "byte",
																"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
															}
														},
														"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
													},
													"description": "<p>A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.</p>"
												}
											},
											"title": "<p>The <code>Status</code> type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by <a href=\"https://github.com/grpc\">gRPC</a>. The error model is designed to be:</p>"
										},
										"response": {
											"type": "object",
											"properties": {
												"type_url": {
													"type": "string",
													"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
												},
												"value": {
													"type": "string",
													"format": "byte",
													"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
												}
											},
											"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
										},
										"location": {
											"type": "object",
											"properties": {
												"organization_id": {
													"type": "string",
													"description": "<p>organization_id is the id of the organization.</p>"
												},
												"project_id": {
													"type": "string",
													"description": "<p>project_id is the projects id.</p>"
												},
												"region": {
													"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
													"type": "object",
													"properties": {
														"provider": {
															"type": "string",
															"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
														},
														"region": {
															"type": "string",
															"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
														}
													}
												}
											},
											"description": "<p>Location represents a target for an operation in HCP.</p>"
										},
										"link": {
											"description": "<p>Link is the resource link the operation is associated with.</p>",
											"type": "object",
											"properties": {
												"type": {
													"type": "string",
													"description": "<p>type is the unique type of the resource. Each service publishes a\nunique set of types. The type value is recommended to be formatted\nin \"<org>.<type>\" such as \"hashicorp.hvn\". This is to prevent conflicts\nin the future, but any string value will work.</p>"
												},
												"id": {
													"type": "string",
													"description": "<p>id is the identifier for this resource.</p>"
												},
												"uuid": {
													"type": "string",
													"description": "<p>uuid is the unique UUID for this resource.</p>"
												},
												"location": {
													"type": "object",
													"properties": {
														"organization_id": {
															"type": "string",
															"description": "<p>organization_id is the id of the organization.</p>"
														},
														"project_id": {
															"type": "string",
															"description": "<p>project_id is the projects id.</p>"
														},
														"region": {
															"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
															"type": "object",
															"properties": {
																"provider": {
																	"type": "string",
																	"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
																},
																"region": {
																	"type": "string",
																	"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
																}
															}
														}
													},
													"description": "<p>Location represents a target for an operation in HCP.</p>"
												},
												"description": {
													"type": "string",
													"description": "<p>description is a human-friendly description for this link. This is\nused primarily for informational purposes such as error messages.</p>"
												}
											}
										},
										"created_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>CreatedAt is the timestamp of when the operation was first created.</p>"
										},
										"updated_at": {
											"type": "string",
											"format": "date-time",
											"description": "<p>UpdatedAt is the timestamp of when the operation was last updated.</p>"
										}
									},
									"description": "<p>Operation represents a single operation.</p>"
								}
							}
						}
					},
					"default": {
						"description": "<p>An unexpected error response.</p>",
						"schema": {
							"type": "object",
							"properties": {
								"error": {
									"type": "string"
								},
								"code": {
									"type": "integer",
									"format": "int32"
								},
								"message": {
									"type": "string"
								},
								"details": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"type_url": {
												"type": "string",
												"description": "<p>A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n<code>path/google.protobuf.Duration</code>). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).</p>\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme <code>http</code>, <code>https</code>, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n<ul>\n<li>If no scheme is provided, <code>https</code> is assumed.</li>\n<li>An HTTP GET on the URL must yield a [google.protobuf.Type][]\nvalue in binary format, or produce an error.</li>\n<li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n<p>Schemes other than <code>http</code>, <code>https</code> (or the empty scheme) might be\nused with implementation specific semantics.</p>"
											},
											"value": {
												"type": "string",
												"format": "byte",
												"description": "<p>Must be a valid serialized protocol buffer of the above specified type.</p>"
											}
										},
										"description": "<p><code>Any</code> contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n<p>Example 1: Pack and unpack a message in C++.</p>\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&#x26;foo)) {\n  ...\n}\n</code></pre>\n<p>Example 2: Pack and unpack a message in Java.</p>\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n<p> Example 3: Pack and unpack a message in Python.</p>\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n<p> Example 4: Pack and unpack a message in Go</p>\n<pre><code> foo := &#x26;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &#x26;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n<p>The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".</p>\n<h1>JSON</h1>\n<p>The JSON representation of an <code>Any</code> value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field <code>@type</code> which contains the type URL. Example:</p>\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &#x3C;string>,\n  \"lastName\": &#x3C;string>\n}\n</code></pre>\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n<code>value</code> which holds the custom JSON in addition to the <code>@type</code>\nfield. Example (for message [google.protobuf.Duration][]):</p>\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>"
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"name": "location.organization_id",
						"description": "<p>organization_id is the id of the organization.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "location.project_id",
						"description": "<p>project_id is the projects id.</p>",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"type": "object",
							"properties": {
								"location": {
									"type": "object",
									"properties": {
										"organization_id": {
											"type": "string",
											"description": "<p>organization_id is the id of the organization.</p>"
										},
										"project_id": {
											"type": "string",
											"description": "<p>project_id is the projects id.</p>"
										},
										"region": {
											"description": "<p>region is the region that the resource is located in. It is\noptional if the object being referenced is a global object.</p>",
											"type": "object",
											"properties": {
												"provider": {
													"type": "string",
													"title": "<p>provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")</p>"
												},
												"region": {
													"type": "string",
													"title": "<p>region is the cloud region (\"us-west1\", \"us-east1\")</p>"
												}
											}
										}
									},
									"description": "<p>Location represents a target for an operation in HCP.</p>"
								},
								"feature_tier": {
									"title": "<p>Feature tier of the Registry</p>",
									"type": "string",
									"enum": ["UNSET", "STARTER", "STANDARD", "PRIVATE_BETA"],
									"default": "UNSET"
								}
							}
						}
					}
				],
				"tags": ["PackerService"]
			}
		]
	},
	"currentPath": ""
}
