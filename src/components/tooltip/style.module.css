/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */

/*
Duplicative composing of `.theme-light` & `.theme-dark` in JSX may seem odd,
compared to propogating the CSS custom properties from a single parent element,
but note that .arrowContainer and .tooltip don't have a common parent element,
as .arrowContainer is rendered into a Portal.
*/

.theme-light {
	--background: var(--token-color-surface-primary);
	--foreground: var(--token-color-foreground-strong);
}

.theme-dark {
	--background: var(--token-color-foreground-strong);
	--foreground: var(--token-color-surface-primary);
}

.arrowContainer {
	/**
   * Note: --top, --left, --offset, & --size are set in JS,
   * to allow for dynamic, collision-free positioning.
   *
   * --top & --left position this element center-top aligned
   * with the tooltip container.
   * - We use translateY(-50%) to make half this element
   *   protrude above the tooltip.
   * - The .arrow element provides the visible tooltip arrow element,
   *   which includes a box shadow that we need to clip, as otherwise it
   *   would overlap on the tooltip
   * - The clip-path clips the .arrow element to prevent it from
   *   casting a box-shadow on the tooltip below. It also contains a -2px
   *   clip inset at the top, to ensure we don't clip off the top corner
   *   of the .arrow element, which protrudes a bit.
   */
	clip-path: inset(-2px 0 50% 0);
	height: var(--size);
	left: var(--left);
	position: absolute;
	transform: translateY(-48%); /* not 50% avoids off-by-a-bit rounding issues */
	display: flex;
	align-items: center;
	justify-content: center;
	top: var(--top);
	width: var(--size);
	z-index: 2;
}

.arrow {
	/**
   * We want to set the width of this .arrow relative to the parent width,
   * such that when .arrow is rotated 45Ëš, its diagonal will fully
   * span the parent container's width.
   *
   * Consider a diagonal cut through the inner box, this yields a right-angled
   * triangle, with the adjacent and opposite sides "a" & "b" equal in length,
   * corresponding to the inner box's size, & the hypotenuse "c" corresponding
   * to the width of the parent container.
   *
   * a^2 + b^2 = c^2
   * 2*(a^2) = c^2
   * a^2 = (c^2 / 2)
   * a = sqrt(c^2 / 2)
   *
   * We can use relative widths here, and the width of "c" is 100%.
   * We can then calculate our desired width for "a":
   *
   * a = sqrt(100^2 / 2)
   * a = sqrt(5000)
   * a ~= 70.71
   */
	--square-size: 70.71%;

	background: var(--background);
	border-top-left-radius: 2px;
	width: var(--square-size);
	height: var(--square-size);
	transform: rotate(45deg);
	box-shadow: var(--token-surface-higher-box-shadow);
}

.tooltip {
	background: var(--background);
	border-radius: 5px;
	box-shadow: var(--token-surface-higher-box-shadow);
	color: var(--foreground);
	font-family: var(--token-typography-body-200-font-family);
	font-size: var(--token-typography-body-200-font-size);
	line-height: var(--token-typography-body-200-line-height);
	max-width: min(75vw, 20em);
	padding: 8px 12px;
	pointer-events: none;
	position: absolute;
	z-index: 1;
}
