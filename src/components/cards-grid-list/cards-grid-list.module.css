/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */

.listRoot {
	display: grid;

	/* Note: --grip-gap set in JS */
	gap: var(--grid-gap);
	list-style: none;
	margin: 0;
	padding: 0;
}

.minWidthMode {
	--min-card-width: 270px;

	/**
  * Details on use of grid-template-columns:
  *
  * Automatically uses more columns, as long as columns are >= min-card-width.
  * Note: minimum size may be < min-card-width, if 100% < min-card-width.
  * So even when the container is small, cards will never overflow.
  */
	grid-template-columns: repeat(
		auto-fit,
		minmax(min(100%, var(--min-card-width)), 1fr)
	);

	@media (--dev-dot-tablet-up) {
		/**
     * TLDR; allows two columns in our content area, but not three.
     *
     * On larger viewports, where our content area reaches up to 780px width,
     * cards are meant to be in two columns.
     * 
     * Note: we could explicitly set 2 columns here instead - it would achieve
     * a similar effect. However, it would arguably be much more brittle,
     * and might be more difficult to reason about.
     * 
     * For example, with 2 explicit columns, if our content area shrank
     * to below 540px, or rather below 564px since we have 24px gap,
     * we'd end up breaking our desired 270px minimum card width.
     * Setting minimum card width instead of column count means slightly
     * more complex CSS, but seems to provide a better guarantee that our
     * layout will not break, even in unexpected scenarios.
     */
		--min-card-width: 300px;
	}

	&.allowThreeColumns {
		@media (--dev-dot-tablet-up) {
			/* Allows three columns in our content area. */
			--min-card-width: 244px;
		}
	}
}

.fixedColumnsMode {
	grid-template-columns: 1fr;

	&.columns2 {
		@media (--dev-dot-tablet-up) {
			grid-template-columns: 1fr 1fr;
		}
	}

	&.columns3 {
		@media (--dev-dot-tablet-up) {
			grid-template-columns: 1fr 1fr;
		}

		@media (--dev-dot-desktop) {
			grid-template-columns: 1fr 1fr 1fr;
		}
	}
}
