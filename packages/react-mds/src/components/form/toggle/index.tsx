import { useId } from 'react'
import type { ReactNode, HTMLProps, ComponentProps } from 'react'
import { Field } from '../field'
import { Fieldset } from '../fieldset'
import s from './form-toggle.module.scss'

interface ToggleBaseProps {
	id?: string

	/**
	 * Can be used to supply any props that the native `<input>` element supports (such as `value`, `placeholder`, in addition to events like `onChange` and `onBlur`)
	 */
	field: HTMLProps<HTMLInputElement>
	toggleOnEnter?: boolean
	testingKey?: string
	error?: ReactNode
}

const ToggleBase = ({
	id,
	field,
	toggleOnEnter,
	testingKey,
	error,
	...rest
}: ToggleBaseProps) => {
	const generatedId = useId()
	const inputId = id ?? generatedId

	const handleEnterKey = (event: React.KeyboardEvent<HTMLInputElement>) => {
		if (event.key === 'Enter') {
			event.currentTarget.checked = !event.currentTarget.checked
		}
	}

	return (
		<div className={s.toggle}>
			<input
				id={inputId}
				className={s.control}
				type="checkbox"
				{...field}
				{...rest}
				role="switch"
				aria-describedby={`${error ? 'error' : 'helper-text'}-${id}`}
				onKeyDown={toggleOnEnter ? handleEnterKey : undefined}
				data-testid={testingKey}
			/>
			<div className={s.facade}></div>
		</div>
	)
}

interface ToggleFieldProps {
	/**
	 * Applies an “invalid” appearance to the control but doesn’t modify its logical validity.
	 */
	isInvalid?: boolean

	/**
	 * Appends a `Required` indicator next to the label text and sets the `required` attribute on the control when user input is required.
	 */
	isRequired?: boolean

	/**
	 * Appends an `Optional` indicator next to the label text when user input is optional.
	 */
	isOptional?: boolean

	/**
	 * Input control’s ID attribute.
	 *
	 * By default, the ID is automatically generated by the component. Use this argument to pass a custom ID.
	 */
	id?: string

	/**
	 * Container that renders its content inside the `<label>` element. The content can be a simple string or a `ReactNode`, in which case it inherits the text style.
	 *
	 * The `for` attribute of the label is automatically generated using the `controlId` value of the control.
	 */
	label?: ReactNode

	/**
	 * Container that renders its content inside the "helper text" block. The content can be a simple string or a `ReactNode`, in which case it inherits the text style.
	 *
	 * The `id` attribute of the message is automatically generated using the `controlId` value of the control.
	 */
	helperText?: ReactNode

	/**
	 * Container that renders its content inside the "error" block. The content can be a simple string or a `ReactNode`, in which case it inherits the text style.
	 *
	 * The `id` attribute of the error message is automatically generated using the `controlId` value of the control.
	 */
	error?: ReactNode

	/**
	 * Can be used to supply any props that the native `<input>` element supports (such as `value`, `placeholder`, in addition to events like `onChange` and `onBlur`)
	 */
	field: HTMLProps<HTMLInputElement>
	className?: string
	testingKey?: string
}

const ToggleField = ({
	isInvalid,
	isRequired,
	isOptional,
	id,
	label,
	helperText,
	error,
	field,
	className,
	testingKey,
	...rest
}: ToggleFieldProps) => {
	const generatedId = useId()
	const inputId = id ?? generatedId
	return (
		<Field
			label={label}
			helperText={helperText}
			error={error}
			isRequired={isRequired}
			isOptional={isOptional}
			id={inputId}
			layout="flag"
			className={className}
		>
			<ToggleBase
				id={inputId}
				field={field}
				testingKey={testingKey}
				{...rest}
			/>
		</Field>
	)
}

interface ToggleGroupProps extends ComponentProps<typeof Fieldset> {
	children: ReactNode
}

const ToggleGroupRoot = ({
	layout = 'vertical',
	legend,
	isOptional,
	isRequired,
	children,
}: ToggleGroupProps) => {
	return (
		<Fieldset
			layout={layout}
			legend={legend}
			isOptional={isOptional}
			isRequired={isRequired}
		>
			{children}
		</Fieldset>
	)
}

const ToggleGroupField = (props: ToggleFieldProps) => {
	return <ToggleField {...props} className={props.className} />
}

const ToggleGroup = {
	Root: ToggleGroupRoot,
	Field: ToggleGroupField,
}

export { ToggleBase, ToggleField, ToggleGroup }
