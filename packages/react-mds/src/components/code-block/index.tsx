'use client'

import { useId, useRef, type ReactNode } from 'react'
import classNames from 'classnames'
import { Text } from '../text'
import { CodeLines } from './code-lines'
import { HiddenCopyContent } from './hidden-copy-content'
import processSnippet from './utils/process-snippet'
import { CopyButton } from '../../patterns/copy-button'
import s from './code-block.module.scss'

/**
 * ALERT: This component is a combination of logic from the official HashiCorp
 * Design System CodeBlock component and the CodeBlock component written by the
 * Web Presence Team. The official component relies on client-side rendering
 * for the calculation of line-heights for line numbers, but this is something
 * we want to be able to achieve without client-side rendering.
 */

interface CodeBlockProps {
	/**
	 * The text/code content for the CodeBlock. The component encodes this
	 * argument before displaying it. Should be a pre-highlighted string
	 * generated by Prism.js or Shiki.
	 */
	value: ReactNode

	/**
	 * The coding language to use for syntax highlighting. If you need
	 * additional languages contact the Design Systems Team.
	 */
	language?: string

	/**
	 * Applies rounded borders to the component. When used within another
	 * component or when the context requires it, you can turn it off.
	 */
	isStandalone?: boolean

	/**
	 * Used to control whether a copy button for copying the code/text content
	 * will be displayed.
	 */
	hasCopyButton?: boolean

	/**
	 * Used to control display of line numbers.
	 */
	hasLineNumbers?: boolean

	/**
	 * Accepts a list or range of line numbers to highlight.
	 * (Examples: `2, 4`,`6-10`)
	 */
	highlightLines?: string

	/**
	 * Accepts any valid CSS unit. If the CodeBlock content exceeds the maximum
	 * height a vertical scrollbar is enabled. This value applies to the code
	 * content only and does not include the header element (title and/or description).
	 */
	maxHeight?: string
	title?: ReactNode
	description?: ReactNode
	className?: string
}

const CodeBlock = ({
	title,
	description,
	language,
	value,
	isStandalone = true,
	hasCopyButton,
	hasLineNumbers = true,
	highlightLines,
	maxHeight = 'auto',
	className,
}: CodeBlockProps) => {
	const copyRef = useRef<HTMLPreElement>(null)
	const preCodeId = useId()

	return (
		<div
			className={classNames(
				s['code-block'],
				s.dark,
				{
					[s[`language-${language}`]]: language,
					[s['is-standalone']]: isStandalone,
					[s['line-numbers']]: hasLineNumbers,
				},
				className
			)}
		>
			<div className={s.header}>
				{title && (
					<Text.HDSBody
						size="200"
						tag="p"
						weight="semibold"
						className={s.title}
					>
						{title}
					</Text.HDSBody>
				)}
				{description && (
					<Text.HDSBody tag="p" size="100" className={s.description}>
						{description}
					</Text.HDSBody>
				)}
			</div>
			<div className={s.body}>
				{/**
				 * NOTE: ideally we'd keep the markup of this component in lockstep
				 * with the markup of the Helios code block. However, we also need
				 * to support "clever" copying of snippets, parsing out shell
				 * prompt characters like `$` from output, as this is a common
				 * practice in our tutorial and documentation content. So, this
				 * HiddenCopyContent component is one divergence from the markup
				 * of the Helios code block.
				 */}
				<HiddenCopyContent code={value} ref={copyRef} />
				<pre className={s.code} id={preCodeId} style={{ maxHeight }}>
					<code>
						<CodeLines
							value={value}
							highlightLines={highlightLines}
							hasLineNumbers={hasLineNumbers}
						/>
					</code>
				</pre>
				{hasCopyButton && (
					<CopyButton
						className={s['copy-button']}
						aria-describedby={preCodeId}
						getTextFn={() => {
							const rawSnippet = copyRef.current?.textContent
							if (!rawSnippet) {
								throw new Error(
									"`code-block` - Couldn't find text content to copy."
								)
							}
							return processSnippet(rawSnippet)
						}}
						text="Copy"
						isIconOnly
						size="small"
					/>
				)}
			</div>
		</div>
	)
}

export { CodeBlock }
