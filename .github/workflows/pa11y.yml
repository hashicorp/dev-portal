name: 'pa11y-ci'
on: [deployment_status]

jobs:
  pa11y:
    if: github.event.deployment_status.state == 'success'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install Dependencies
        run: npm ci

      - name: Run pa11y-ci Against Sitemap
        continue-on-error: true
        run: npm run pa11y-ci:sitemap -- "${{ github.event.deployment_status.target_url }}/sitemap.xml" 2>&1 | tee pa11y_output.txt

      - name: Comment on PR
        uses: actions/github-script@v5
        env:
          BODY_PREFIX: '<!-- pa11y-results -->'
        with:
          script: |
            const { promises: fs } = require('fs')

            // Find this PR
            const { data } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha
            })
            const prNumber = data[0].number

            // Read the pa11y output and build the comment body
            const pa11yOutput = await fs.readFile('./pa11y_output.txt')
            const commentBody = `${porcess.env.BODY_PREFIX}<details><summary>pa11y-ci results :microscope:</summary>\`\`\`${pa11yOutput}\`\`\`</details>`

            // Get the comments on this PR
            const { data } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            })

            // Try to find an existing pa11y results comment
            const previousComment = data.find((comment) => comment.body.startsWith(process.env.BODY_PREFIX))
            if (previousComment) {
              // Update the previous comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: previousComment.id,
                body: commentBody
              })
            } else {
              // Create a new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              })
            }
